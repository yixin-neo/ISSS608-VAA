---
title: "Take-home_Ex02"
author: "NeoYX"
date: '15 May 2023'
date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  echo: true
  message: true
format:
  html:
    code-fold: true
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

::: callout-note
**Edge data** should be organised as such: (can use dplyr methods)

First column: Source id (FK to Node second column) - compulsory

Second column: Target id (FK to Node second column) - compulsory

**Node data**

First column: ID (contains all the distinct values of source and target in Edge data) - compulsory

-   Nodes present in edge data must exists in ID of node data, must not have missing in node ID.

Second column: Label (only need if Id are all integers)
:::

::: callout-warning
Try not to use R built-in NA/NULL function. Manually type "unknown' / 'missing' as a value instead.
:::

# Vast Challenge 2023 Mini Challenge 2 (Subtask: 1)

In this challenge, I seek to use visual analytics to identify temporal patterns for individual entities and between entities using the knowledge graph the FishEye Organisation has provided us with. Also , I will be categorising the type of business relationship patterns found.

# 1 About the dataset

## 1.1 Data dictionary

**Node Attributes:**

-   id \-- Name of the company that originated (or received) the shipment

-   shpcountry \-- Country the company most often associated with when shipping

-   rcvcountry \-- Country the company most often associated with when receiving

-   dataset \-- Always 'MC2'

**Edge Attributes:**

-   arrivaldate \-- Date the shipment arrived at port in YYYY-MM-DD format.

-   hscode \-- Harmonized System code for the shipment. Can be joined with the hscodes table to get additional details.

-   valueofgoods_omu \-- Customs-declared value of the total shipment, in Oceanus

-   Monetary Units (OMU)

-   volumeteu \-- The volume of the shipment in 'Twenty-foot equivalent units', roughly how many 20-foot standard containers would be required. (Actual number of containers may have been different as there are 20ft and 40ft standard containers and tankers that do not use containers)

-   weightkg \-- The weight of the shipment in kilograms (if known)

-   dataset \-- Always 'MC2'

-   type \-- Always 'shipment' for MC2

-   generated_by \-- Name of the program that generated the edge. (Only found on 'bundle' records.)

## 1.2 Importing the datasets

Import libraries

The new libraries used today are :

-   `jsonlite` to import json file

```{r}
pacman::p_load(jsonlite, igraph, tidygraph, ggraph,
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts,knitr,plotly, ggHoriPlot, ggthemes)
```

```{r}
MC2 <- jsonlite::fromJSON("C:/yixin-neo/ISSS608-VAA/Project/data/mc2_challenge_graph.json")
```

```{r}
#| eval: false
#| echo: false
carp <- jsonlite::fromJSON("C:/yixin-neo/ISSS608-VAA/Project/data/bundles/carp.json")
```

Pull out the nodes and edge data and save them as tibble data frames.

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>% 
  select(id,shpcountry,rcvcountry)
```

```{r}
#| echo: false
glimpse(MC2_nodes)
```

Rearranging the columns in edge file as we require `source` and `target` columns to be the first two columns.

```{r}
MC2_edges <- as_tibble(MC2$links) %>% 
  select(source,target,arrivaldate,hscode,valueofgoods_omu,volumeteu,weightkg,valueofgoodsusd)  
# can exclude dataste column as they all contain the same values.
```

```{r}
#| echo: false
glimpse(MC2_edges)
```

## 1.3 Data cleaning

### 1.3.1 Check for null values

Check whether each column in MC2_nodes and MC2_edges contains null and prints the percentage of null for each column.

**For MC2_nodes dataframe:**

There are no null values in the id column of Nodes file, which is great.

```{r}
# Check for null values in each column
null_counts_nodes <- sapply(MC2_nodes, function(x) sum(is.null(x) | is.na(x)))

# Calculate the percentage of null values for each column
null_percentages_nodes <- null_counts_nodes / nrow(MC2_nodes) * 100

# Display the results
#print(null_percentages)

knitr::kable(null_percentages_nodes, "simple", col.names = c("Null Percentage"))
```

**For MC2_edges dataframe:**

As there are a lot zeros inside MC2_edges\$volumteu col, we will consider 0 as equivalent to null values.

We can see that the columns `valueofgoods_omu` and `volumeteu` are mainly null. `valueofgoodusd` column contains more than 50% null values. There are 4 records of `source` with 0 as value, but 0 is their unique identifier so we do not consider 0 as null in `source` column. It means to say that only `source`, `target`, `arrivaldate`, `hscode` and `weight` columns will be helpful in our analysis.

```{r}
# Check for null values in each column
null_counts <- sapply(MC2_edges, function(x) sum(is.null(x) | is.na(x) | x==0))

# Calculate the percentage of null values for each column
null_percentages <- null_counts / nrow(MC2_edges) * 100

# Display the results
#print(null_percentages)

knitr::kable(null_percentages, "simple", col.names = c("Null Percentage"))

```

We will be dropping the `valueofgoods_omu` , `valueofgoodusd`and `volumeteu` columns from our dataframe.

```{r}
MC2_edges <- MC2_edges %>% select('source','target', 'arrivaldate', 'hscode','weightkg')
```

```{r}
#| eval: false
#| echo: false

# Filter rows where 'source' column contains 0
filtered_df <- MC2_edges %>% filter(source == 0)

# Display the filtered dataframe
print(filtered_df)

```

### 1.3.2 Lets check for duplicates

**For MC2_nodes dataframe:**

There are no duplicated nodes, which is great.

```{r}
#| eval: false
# check for nay duplicates
any(duplicated(MC2_nodes))
```

**For MC2_edges dataframe:**

There are about 273971 records (4% out of total records) that are duplicated.

```{r}
#duplicated only
# print(any(duplicated(MC2_edges)))
MC2_edges_dup <- MC2_edges[duplicated(MC2_edges), ]
print(nrow(MC2_edges_dup))
```

We will drop the duplicates.

```{r}
# Drop duplicate rows from the dataframe
MC2_edges_no_dup <- MC2_edges[!duplicated(MC2_edges), ]
```

### 1.3.3 Check on the HScodes

Check the unique number of hscodes in the dataset. There are 4761 unique HScodes.

```{r}
# Find the number of unique values in hscode
length(unique(MC2_edges_no_dup$hscode))

```

With reference to [World Custom Organisation Harmonized System codes](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx), Section 1 and 4 are related to seafood trade. We will filter for records that has HScodes starting with `1604` and `1605` as they refer to seafood commodities, thus removing many other transactions like 'television', 'steel parts' etc... not related to our project goals...

```{r}
mc2_seafood_edges<- MC2_edges_no_dup[grepl('^1605|^1604', MC2_edges_no_dup$hscode), ]
#MC2_edges[startsWith(MC2_edges$hscode, "1601"), ]

```

### 1.3.4 Preparation of Edges

```{r}
#unique(mc2_seafood_edges$hscode)
#unique(mc2_seafood_edges$source)
mc2_seafood_edges_agg <- mc2_seafood_edges %>%  
  group_by(source, target,arrivaldate) %>% 
  summarise(Weight=n(),
            Totalweight = sum(weightkg),
            hscode=first(hscode)) %>% 
  filter(Weight >=6) %>% 
  ungroup()
```

I will now wrangle the date columns to prepare dataframe for temporal analysis later.

\(1\) change the arrivaldate column to date data type

\(2\) create year, month, weekday, weeknumber columns

```{r}
mc2_seafood_edges_agg$arrivaldate <- as.Date(mc2_seafood_edges_agg$arrivaldate)

```

```{r}
mc2_seafood_edges_agg <- mc2_seafood_edges_agg %>% 
  mutate(year = year(arrivaldate)) %>% 
  mutate(month = month(arrivaldate)) %>% 
  mutate(day = day(arrivaldate)) %>% 
  mutate(weekday = wday(arrivaldate,
                        label= TRUE,
                        abbr = FALSE)) %>% 
  mutate(weeknumber = isoweek(arrivaldate))
```

To prevent disconnected graphs, I am going to inspect the frequency of source and target actors, and remove those actors below a frequency count of 5.

First , we remove low frequency source actors under 5 counts.

```{r}
# Calculate the frequency count of values in 'source'
frequency_table <- table(mc2_seafood_edges_agg$source)

# Get the values in 'col1' with a frequency count greater than or equal to 5
valid_source <- names(frequency_table[frequency_table >= 5])

# Subset the dataframe to keep only rows with valid values in 'col1'
mc2_seafood_edges_agg <- mc2_seafood_edges_agg[mc2_seafood_edges_agg$source %in% valid_source, ]


```

Next, remove target actors with frequency count less than 5:

```{r}
# Calculate the frequency count of values in 'source'
frequency_table <- table(mc2_seafood_edges_agg$target)

# Get the values in 'col1' with a frequency count greater than or equal to 5
valid_target <- names(frequency_table[frequency_table >= 5])

# Subset the dataframe to keep only rows with valid values in 'col1'
mc2_seafood_edges_agg <- mc2_seafood_edges_agg[mc2_seafood_edges_agg$target %in% valid_target, ]


# Print the filtered dataframe
#print(mc2_seafood_edges_agg)
```

Based on some checks on the dataset, there were two pairs of actors that exist as disconnected components. They are 'Rift Valley fishery OJSC', 'Bujagali Falls Pic Family', 'Neptune's Realm NV Navigation', 'Rybachit Sagl and Son's', 'Mar de la Aventura Rybachit' and 'Olas del Sur Ltd'. I will remove the edge records if either `source` or `target` columns contains any of these four nodes.

```{r}
# Specify the values to be excluded
values_to_exclude <- c('Rift Valley fishery OJSC', 'Bujagali Falls Pic Family', 'Neptune\'s Realm NV Navigation', 'Rybachit Sagl and Son\'s', 'Mar de la Aventura Rybachit', 'Olas del Sur Ltd')

# Delete rows with specified values in 'from' or 'to' columns
mc2_seafood_edges_agg <- mc2_seafood_edges_agg %>%
  filter(!(source %in% values_to_exclude | target %in% values_to_exclude))

# Display the updated data frame
#print(mc2_seafood_edges_agg)

```

```{r}
#| eval: false
#| echo: false
sort(table(mc2_seafood_edges_agg$target))
```

### 1.3.5 Preparation of Nodes

We will include only nodes that are in source and target columns in the `mc2_seafood_edges_agg` dataframe

```{r}
nodes_seafood <- MC2_nodes %>%
  filter (id %in% c(mc2_seafood_edges_agg$source, mc2_seafood_edges_agg$target))
```

# 2 Visualization

## 2.1 Creating the network graph dataframe using tbl_graph() of the tidygraph package.

::: callout-note
Node file needs to have ID of nodes as first column.

Edge file need to contain source and target as column 1 and 2.
:::

To create the network graph dataframe

```{r}
seafood_graph<- tbl_graph(nodes=nodes_seafood,
                          edges = mc2_seafood_edges_agg,
                          directed = TRUE)
```

Taking a look at the dataframe..

```{r}
#| echo: false
seafood_graph
```

We can run the code below to check that seafood_graph is a connected graph:

```{r}
is.connected(seafood_graph)
```

Now lets calculate the various centrality measures of seafood_graph. The top 10 inodes with reference to various centrality scores are printed using `kable()` function from `knitr`.

I have taken reference from this [link](https://hohenfeld.is/posts/graphs-are-fun-an-introduction-to-graphs-in-r/). The tidyverse centrality functions can be taken from [here](https://cran.r-project.org/web/packages/tidygraph/tidygraph.pdf).

First compute 'in-deg', 'out-deg' and 'pagerank' scores. All my betweenness scores were zero (Investigation in progress)...

```{r}
seafood_graph<- seafood_graph %>%
  activate("nodes") %>% 
  mutate(betweenness_centrality = centrality_betweenness(directed = TRUE)) %>% 
  mutate(in_deg_centrality = centrality_degree(weights = Weight, 
                                               mode = "in")) %>% 
  mutate(out_deg_centrality = centrality_degree(weights = Weight, 
                                               mode = "out")) %>% 
  mutate(pagerank = centrality_pagerank(weights = Weight,
                                        directed = TRUE)) %>% 
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, 
                                                      directed = TRUE,
                                                      n = 20)))

```

To see the top 10 nodes with 'in-deg' scores:

```{r}
seafood_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(in_deg_centrality), desc(pagerank)) %>% 
  select(id,in_deg_centrality,pagerank) %>% 
  head(n=10) %>% 
  kable()
```

To see the top 10 nodes with 'out-deg' scores:

```{r}
seafood_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(out_deg_centrality)) %>% 
  select(id,out_deg_centrality) %>% 
  head(n=10) %>% 
  kable()
```

## 2.2 Plot network graph based on centrality scores 

The code chunk below plots a simple static graph with the nodes coloured by receiving countries and the node size relative to their in-deg centrality scores. They are a few nodes with high scores.

```{r}
#| fig-width: 12
#| fig-asp: 0.618
set.seed (1234)
a <- ggraph(seafood_graph, layout = 'fr') +
  geom_edge_link(aes(width=Weight, alpha= 0.2),
                 arrow = arrow(length = unit(2, 'mm')), #<<< delete
                 end_cap = circle(1, 'mm')) +           #<<< delete
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_deg_centrality, colour=rcvcountry)) +
  geom_edge_loop()

a + theme_graph()

```

However, this graph is not interactive, I will be building an interactive one later.

## 2.3 Are there communities inside this network graph? 

The **`group_edge_betweenness()`** function is typically used in community detection algorithms, such as the Girvan-Newman algorithm. It is a top down approach by calculating the edge betweenness centrality for each edge in the graph (in each iteration) and progressively removes the edges with the highest betweenness centrality until the desired number of communities is reached. The **`n`** parameter specifies the number of edges to remove. The more times we cut an edge, the more communities we get. I am not very certain at the number of communities I should get, in R shiny, we could set n as an interactive component for users to play with. The tags obtained from community detection could be analysed with the nodes attributes.

```{r}
#| fig-width: 12
#| fig-asp: 0.618

set.seed (1234)
b <- seafood_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, 
                                                      directed = TRUE,
                                                      n = 20))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

b  + theme_graph() + theme(legend.key.size = unit(1, "lines"),
          legend.position = 'bottom')

```

# 3 Interactive graphs of network structure and temporal analysis

## 3.1 Interactive graph grouped by  IN-DEGREE CENTRALITY scores

We first need to rename the edge file first two columns to `from` and `to` for visNetwork to be able to regconise them. `title` column has been created for tooltip when we hover over each of the edges.

```{r}
mc2_seafood_edges_agg_vis <- mc2_seafood_edges_agg %>% 
  rename(from = source) %>% 
  rename(to = target) %>% 
  mutate(title = paste('Total Weight = ',Totalweight, "\n HSCODE =", hscode))
```

The code chunk below extracts the node table from tbl_graph() object 'seafood_graph' created earlier. The reason for donig so is because it contains the centrality values that were calculated using the tidyverse centrality functions.

Next, add a column `title` because it is the column that VisNetwork will search for to display tooltip when the mouse hovers over the nodes. We will be displaying the 'in-deg', 'pagerank' and 'out-deg' scores in the tooltip. If we want to colour the nodes by their shipping countries, then we would have to rename the `shpcountry` column to `group` because visNetwork looks for `group` column to colour the nodes. However, we will not do this now.

```{r}
# extract nodes file from seafood_graph as a data frame
nodes_seafood_vis <- as.data.frame(seafood_graph %>% activate(nodes))

# further processing
nodes_seafood_vis <- nodes_seafood_vis %>% 
  #rename(group= rcvcountry)  %>% 
  mutate(pagerank = round(pagerank, 5)) %>% 
  mutate(title = paste('rcvcountry =', rcvcountry, ',',
                       '\n In-deg = ',in_deg_centrality, ',',
                       "\n Pagerank =", pagerank, ',',
                       "\n Out-deg =", out_deg_centrality))

```

The code chunk below binned the in-deg scores into intervals of 50 using the `cut()` function. Next, rename the `in_deg_grp` column to `group` column for VisNetwork to colour nodes by in-deg intervals.

```{r}
in_deg_brks <- c(0, 500, 1000, 2000, 3000, 7000)
grps <- c('500 & Below','501-1000', '1001-2000', '2001-3000', '3001-6132')

nodes_seafood_vis$in_deg_grp <- cut(nodes_seafood_vis$in_deg_centrality, breaks=in_deg_brks, labels = grps,include.lowest = TRUE)

nodes_seafood_vis$in_deg_grp <- factor(nodes_seafood_vis$in_deg_grp, ordered = TRUE, levels = c('3001-6132','2001-3000','1001-2000','501-1000','500 & Below'))

nodes_seafood_vis <- nodes_seafood_vis %>% 
  rename(group = in_deg_grp)
```

The code chunk below plots in interactive network graph using visNetwork.

```{r}
#| fig-width: 12
#| fig-asp: 0.618
visNetwork(nodes_seafood_vis,
           mc2_seafood_edges_agg_vis,
           main = "Seafood graph grouped by In-Deg centrality intervals",
           height = "500px", width = "100%") %>%
  visIgraphLayout(layout = "layout_nicely") %>%
  visEdges(arrows = 'to',
           smooth = list(enables = TRUE,
                         type= 'curvedCW'),
           shadow = FALSE,
           dash = FALSE) %>% 
  visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
             nodesIdSelection = TRUE,
             selectedBy = "group") %>%
  visInteraction(hideEdgesOnDrag = TRUE) %>% 
  visLegend() %>%
  visLayout(randomSeed = 123)
```

::: callout-note
## Interactivity features of this graph

\(1\) Select Id dropdown list

\(2\) Select Group dropdown list: The values inside refers to the range of 'in-deg' centrality scores of the nodes. The pink colour node will represent the highest in-deg centrality score, followed by green, yellow, red and blue.

\(3\) Zoom in to see the node labels, and arrows direction.

\(4\) Drag a particular node away from the cluster to admire it.

\(5\) Hover mouse over a node will display tooltip (In-deg, pagerank and out-deg score). It will also display the 'ego' network with itself at the ego. Click on the node freeze the ego network. Click on blank space to reset.

\(6\) Hovering the mouse over an edge will display tooltip (Total weight of cargo, hscode of cargo)

\(7\) Click and Drag on the graph to move the canvas around, will also temporary disable the edge lines.
:::

## 3.3 Interactive graph grouped by  OUT-DEGREE CENTRALITY scores

The code chunk below binned the out-deg scores into intervals of 50 using the `cut()` function. Next, rename the `group` column back to `in-deg` column followed by `out_deg_grp` column to `group` column for VisNetwork to colour nodes by out-deg intervals.

```{r}
out_deg_brks <- c(0, 500, 1000, 2000, 3000, 7000)
grps <- c('500 & Below','501-1000', '1001-2000', '2001-3000', '3001-6132')

nodes_seafood_vis$out_deg_grp <- cut(nodes_seafood_vis$out_deg_centrality, breaks=in_deg_brks, labels = grps,include.lowest = TRUE)

nodes_seafood_vis$out_deg_grp <- factor(nodes_seafood_vis$out_deg_grp, ordered = TRUE, levels = c('3001-6132','2001-3000','1001-2000','501-1000','500 & Below'))

nodes_seafood_vis <- nodes_seafood_vis %>% 
  rename(in_deg_grp = group) %>% 
  rename(group = out_deg_grp)
```

The code chunk below plots the interactive graph.

```{r}
#| fig-width: 12
#| fig-asp: 0.618
visNetwork(nodes_seafood_vis,
           mc2_seafood_edges_agg_vis,
           main = "Seafood graph grouped by Out-Deg centrality intervals",
           height = "500px", width = "100%") %>%
  visIgraphLayout(layout = "layout_nicely") %>%
  visEdges(arrows = 'to',
           smooth = list(enables = TRUE,
                         type= 'curvedCW'),
           shadow = FALSE,
           dash = FALSE) %>% 
  visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
             nodesIdSelection = TRUE,
             selectedBy = "group") %>%
  visInteraction(hideEdgesOnDrag = TRUE) %>% 
  visLegend() %>%
  visLayout(randomSeed = 123)
```

The chart highlights actors with high out-deg centrality scores over 2028 to 2034. Let us visualise the horizon plot of the number of trading activities of the top 3 companies over the years.

## 3.4 Temporal analysis of top 3 companies in trading occurrence. 

Creating horizon plots for Playa del Tesoro OJSC company.. First filter records of this company.

```{r}
playa <- mc2_seafood_edges_agg_vis %>%
  filter(from == "Playa del Tesoro OJSC")
```

Next, filter records where `Weight` value does not fall in outlier regions

```{r}
cutpoints_playa <- playa  %>% 
  mutate(
    outlier = between(
      Weight, 
      quantile(Weight, 0.25, na.rm=T)-
        1.5*IQR(Weight, na.rm=T),
      quantile(Weight, 0.75, na.rm=T)+
        1.5*IQR(Weight, na.rm=T))) %>% 
  filter(outlier)
```

Set the fold value by finding the midpoint of the max and min Weight values for the entire Horizon plot. the `ori` value will be used in the `origin` parameter which indicates the origin of the horizon plot.

Then set the intervals of Weighs value using the `seq()` function. The `sca` vector will be used to colour the horizon plot later by using the parameter `fill.`

```{r}
ori <- sum(range(cutpoints_playa$Weight))/2

sca <- seq(range(cutpoints_playa$Weight)[1], 
           range(cutpoints_playa$Weight)[2], 
           length.out = 7)[-4]
```

Last preparation to do would be to fix the arrivaldate column such that all the year value are the same (for the purpose for plotting horizon chart later). All the year values will get a default '2021'.

```{r}
playa$mine_date <- sprintf("2021-%s-%s", substr(playa$arrivaldate, 6, 7), substr(playa$arrivaldate, 9, 10))
playa$mine_date <- as.Date(playa$mine_date)
```

We are finally ready to plot....

```{r}
#| fig-width: 12
#| fig-asp: 0.618
playa %>% ggplot() +
  geom_horizon(aes(mine_date, 
                   Weight,
                   fill = ..Cutpoints..), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(year~.) +
  theme_few() +
  theme(
    panel.spacing.y=unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand=c(0,0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle('Number of trade by Playa del Tesoro OJSC from 2028 to 2034')
```

Blue regions represents cold trading intervals while red regions represents high trading occurrence for this company. The chart is faceted by year. Observe that the company was cold from Apr 2031 to May 2033 and trading occurrence pick up in the last quarter of 2033.

## 3.5 Interactive graph grouped by  community

```{r}
#| fig-width: 12
#| fig-asp: 0.618

# let the community community column be called group column
nodes_seafood_vis <- nodes_seafood_vis %>% 
  rename(out_deg_grp = group) %>% 
  rename(group = community)


visNetwork(nodes_seafood_vis,
           mc2_seafood_edges_agg_vis,
           main = "Seafood graph grouped by Communities",
           height = "500px", width = "100%") %>%
  visIgraphLayout(layout = "layout_nicely") %>%
  visEdges(arrows = 'to',
           smooth = list(enables = TRUE,
                         type= 'curvedCW'),
           shadow = FALSE,
           dash = FALSE) %>% 
  visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
             nodesIdSelection = TRUE,
             selectedBy = "group") %>%
  visInteraction(hideEdgesOnDrag = TRUE) %>% 
  #visLegend() %>%
  visLayout(randomSeed = 123)
```

```{r}
#| eval: false
#| echo: false
saveRDS(mc2_seafood_edges_agg_vis, "C:/yixin-neo/ISSS608-VAA/Project/data/mc2_seafood_edges_agg_vis.rds")
```

# 4 References

https://hohenfeld.is/posts/graphs-are-fun-an-introduction-to-graphs-in-r/

On ggraph edgelink

https://cran.r-project.org/web/packages/ggraph/vignettes/Edges.html

Visnetwork

http://datastorm-open.github.io/visNetwork/
