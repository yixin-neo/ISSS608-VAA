{
  "hash": "aada276553e6c64d1d4d8e1cbb8f61aa",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 16 (Week 8: Choropleth Map)\"\nauthor: \"NYX\"\ndate: '9 June 2023'\ndate-modified: \"2023-06-17\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat:\n  html:\n    code-fold: True\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## **18.1 Overview**\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called [**tmap**](https://cran.r-project.org/web/packages/tmap/) package.\n\n## **18.2 Getting Started**\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Tmaps stands for thematic maps. Beside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data. Another [link](https://r-spatial.github.io/sf/)\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tmap,tidyverse, knitr)\n```\n:::\n\n\nWe only have to install **tidyverse** instead of **readr**, **tidyr** and **dplyr** individually.\n\n**18.3.1 The Data**\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in **ESRI shapefile format**. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an **aspatial data file**. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it's `PA` and `SZ` (FK) fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile (`SUBZONE_N` as join key). Aim to get `geometry` column from shapefile.\n\n### **18.3.2 Importing Geospatial Data into R**\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n`dsn` : destination folder (A collection of files that `sf` function needs to read geospatial stuff)\n\n`layer`: data file (do not need to state the extension) sf will automatically use the appropriate drivers. See below. For instance, sf will know that the projected crs is SVY21.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn= 'data/geospatial',\n                layer = 'MP14_SUBZONE_WEB_PL')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex16\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nmpsz is a sf object but in a dataframe format. It has a `geometry` field at the back, it contains coordinate pairs of polygons. Each value of `geometry` column is a list. We can use tidyverse functions to manipulate mpsz.\n\n::: callout-note\nDuring joins, to retain geospatial properties, make sure the sf object in the left table of a left join.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n\nTo examine the content of `mpsz`,\n\nunder geometry type there could be :\n\n-   mutlipolygon\n\n-   multistring\n\n-   point\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n:::\n:::\n\n\n**18.3.3 Importing Attribute Data into R**\n\nNext, we will import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*. \\<\\-- aspatial file\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv('data/aspatial/respopagesextod2011to2020.csv')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#summary(popdata)\nglimpse(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 984,656\nColumns: 7\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ AG   <chr> \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  <chr> \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"M…\n$ TOD  <chr> \"HDB 1- and 2-Room Flats\", \"HDB 3-Room Flats\", \"HDB 4-Room Flats\"…\n$ Pop  <dbl> 0, 10, 30, 50, 0, 0, 40, 0, 0, 10, 30, 60, 0, 0, 40, 0, 0, 10, 30…\n$ Time <dbl> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n```\n:::\n:::\n\n\n### **18.3.4 Data Preparation**\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### 18.3.4.1 Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *`pivot_wider()`* of **tidyr** package, and\n\n-   *`mutate()`*, *`filter()`*, *`group_by()`* and *`select()`* of **dplyr** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(popdata$AG)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"0_to_4\"      \"5_to_9\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"   \n [6] \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"   \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA,SZ,AG) %>%   #<<< to calculate sum of population of each combinatin of PA, SZ and AG \n  summarise (POP = sum(Pop))\n\nkable(head(popdata2020,5))\n```\n\n::: {.cell-output-display}\n|PA         |SZ                     |AG       | POP|\n|:----------|:----------------------|:--------|---:|\n|Ang Mo Kio |Ang Mo Kio Town Centre |0_to_4   | 170|\n|Ang Mo Kio |Ang Mo Kio Town Centre |10_to_14 | 280|\n|Ang Mo Kio |Ang Mo Kio Town Centre |15_to_19 | 340|\n|Ang Mo Kio |Ang Mo Kio Town Centre |20_to_24 | 270|\n|Ang Mo Kio |Ang Mo Kio Town Centre |25_to_29 | 260|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA,SZ,AG ) %>%   #<<< to calculate sum of population of each combinatin of PA, SZ and AG \n  summarise (POP = sum(Pop))  %>%  #<< at this point, we only have four columns (PA, SZ, AG, POP)\n  ungroup() %>%  #<<< ungroup to release the grouping and continue with other wrangling\n  pivot_wider(names_from = AG,\n              values_from = POP)\nkable(head(popdata2020,5))\n```\n\n::: {.cell-output-display}\n|PA         |SZ                     | 0_to_4| 10_to_14| 15_to_19| 20_to_24| 25_to_29| 30_to_34| 35_to_39| 40_to_44| 45_to_49| 50_to_54| 55_to_59| 5_to_9| 60_to_64| 65_to_69| 70_to_74| 75_to_79| 80_to_84| 85_to_89| 90_and_over|\n|:----------|:----------------------|------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|------:|--------:|--------:|--------:|--------:|--------:|--------:|-----------:|\n|Ang Mo Kio |Ang Mo Kio Town Centre |    170|      280|      340|      270|      260|      310|      330|      400|      480|      380|      310|    230|      290|      250|      240|      130|      100|       30|          10|\n|Ang Mo Kio |Cheng San              |   1060|     1040|     1160|     1330|     1720|     2020|     2150|     2080|     2200|     2050|     2130|   1050|     2110|     2180|     1750|      960|      650|      340|         170|\n|Ang Mo Kio |Chong Boon             |    850|     1020|     1070|     1310|     1610|     1890|     1720|     1810|     1820|     1900|     2100|    850|     2150|     2100|     1800|     1120|      800|      430|         220|\n|Ang Mo Kio |Kebun Bahru            |    680|      960|     1010|     1170|     1410|     1420|     1440|     1630|     1810|     1720|     1800|    800|     1780|     1710|     1450|      830|      630|      350|         150|\n|Ang Mo Kio |Sembawang Hills        |    210|      400|      450|      500|      500|      340|      300|      370|      550|      540|      550|    320|      480|      410|      360|      230|      150|      100|          60|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA,SZ,AG ) %>%   #<<< to calculate sum of population of each combinatin of PA, SZ and AG \n  summarise (POP = sum(Pop))  %>%  #<< at this point, we only have four columns (PA, SZ, AG, POP)\n  ungroup() %>%  #<<< ungroup to release the grouping and continue with other wrangling\n  pivot_wider(names_from = AG,\n              values_from = POP) %>% \n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) +\n           rowSums(.[13:15])) %>% \n  mutate(AGED = rowSums(.[16:21])) %>% \n  mutate(TOTAL = rowSums(.[3:21])) %>% \n  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %>% \n  select(PA, SZ, YOUNG, \n         `ECONOMY ACTIVE`, AGED,\n         TOTAL, DEPENDENCY)\n kable(head(popdata2020,5)) \n```\n\n::: {.cell-output-display}\n|PA         |SZ                     | YOUNG| ECONOMY ACTIVE| AGED| TOTAL| DEPENDENCY|\n|:----------|:----------------------|-----:|--------------:|----:|-----:|----------:|\n|Ang Mo Kio |Ang Mo Kio Town Centre |  1440|           2610|  760|  4810|  0.8429119|\n|Ang Mo Kio |Cheng San              |  6640|          15460| 6050| 28150|  0.8208279|\n|Ang Mo Kio |Chong Boon             |  6150|          13950| 6470| 26570|  0.9046595|\n|Ang Mo Kio |Kebun Bahru            |  5540|          12090| 5120| 22750|  0.8817204|\n|Ang Mo Kio |Sembawang Hills        |  2100|           3410| 1310|  6820|  1.0000000|\n:::\n:::\n\n\n18.3.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>% \n  mutate_at(.var = vars(PA, SZ),\n            .funs = funs(toupper)) %>% \n  filter(`ECONOMY ACTIVE` >0)\n```\n:::\n\n\n::: callout-note\n1.  **`mutate_at`** function: This function is used to modify multiple columns in a dataframe simultaneously. It allows you to specify the columns to be transformed and the transformation function to be applied.\n\n2.  **`.var`** argument: It specifies the columns to be transformed. In this case, the columns are \"PA\" and \"SZ\" from the \"popdata2020\" dataframe.\n\n3.  **`.funs`** argument: It specifies the transformation function(s) to be applied to the selected columns. In this case, the function **`toupper`** is used, which converts the text to uppercase.\n:::\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* (mpsz) and *SZ* (popdata2020) as the common identifier.\n\nThe `geometry` column from mpsz sf file is shifted all the way to the back after left join. The output table is a sf file because mpsz (sf obj) is the left table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c('SUBZONE_N' ='SZ'))\n```\n:::\n\n\n::: callout-note\n-   *left_join()* of **dplyr** package is used with `mpsz` **simple feature** data frame as the left data table is to ensure that the output will be a **simple features** data frame.\n:::\n\nWrite the mpsz_pop2020 as a rds file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, 'data/rds/mpszpop2020.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz_pop2020)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## **18.4 Choropleth Mapping Geospatial Data Using *tmap***\n\nActually ggplot2 can help to visualise but it lack mapping features. We could have used ggplot() and geom_sf(). So we use `tmap` library instead\n\n**Two approaches** can be used to prepare thematic map using *tmap*, they are:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n\n-   Plotting highly customisable thematic map by using tmap elements. (More fine controls) `shape`, `fill`, `border`\n\n### **18.4.1 Plotting a choropleth map quickly by using *qtm()***\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases. qtm() stands for QUICK tmap.\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n#tmap_mode('view')\n#tmap_options(check.and.fix = TRUE)\nqtm(mpsz_pop2020,\n    fill = 'DEPENDENCY')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n-   *tmap_mode()* with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n:::\n\n### \n\n**18.4.2 Creating a choropleth map by using *tmap*'s elements**\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**'s drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          #n = 6, # n defines the number of classes of below\n          style = 'quantile', #<< affect how values of DEPENDENCY is binned, a classification method\n          palette = 'Blues',\n          title = \"Dependency ratio\") +\n tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n           main.title.position = \"center\",\n           main.title.size = 1.2,\n           legend.height = 0.45, \n           legend.width = 0.35,\n           frame = TRUE) +\n  \n  tm_legend(position = c('right','bottom'),\n            outside = FALSE,\n            frame= TRUE) +\n\n  tm_borders(alpha = 0.5) + #<< the outline of each SZ\n  tm_compass(type=\"8star\", size = 2) + #<< compass\n  tm_scale_bar() + #<< the BW scale bar\n  tm_grid(alpha =0.2) + #<< the plot grid lines\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(mpsz_pop2020$DEPENDENCY, \n         probs = seq(0,1,0.2),\n         na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        0%        20%        40%        60%        80%       100% \n 0.1111111  0.6919431  0.7655602  0.8208279  0.8988166 19.0000000 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 18.4.2.1 Drawing a base map\n\nThe basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### 18.4.2.2 Drawing a choropleth map using *tm_polygons()*\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\") + \n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n-   The default interval binning used to draw the choropleth map is called \"pretty\". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n\n-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\n\n-   By default, Missing value will be shaded in grey.\n:::\n\n#### 21.4.2.3 Drawing a choropleth map using *tm_fill()* and \\*tm_border()\\*\\*\n\nActually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using *tm_fill()* alone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1, #<< linewidth \n             alpha = 1,\n             lty= 'dashed') #<< transparency\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nNotice that light-gray border lines have been added on the choropleth map.\n\nThe *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nBeside *alpha* argument, there are three other arguments for *tm_borders()*, they are:\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. The default is 1, and\n\n-   *lty* = border line type. The default is \"solid\".\n\n### **18.4.3 Data classification methods of tmap**\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.\n\n#### 21.4.3.1 Plotting choropleth maps with built-in [classification ](https://www.rdocumentation.org/packages/classInt/versions/0.4-9/topics/classIntervals)methods \n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 8,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, *equal* data classification method is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nNotice that the distribution of **quantile** data classification method are more **evenly distributed** then e**qual** data classification method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(mpsz_pop2020$DEPENDENCY, \n         probs = seq(0,1,0.25),\n         na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        0%        25%        50%        75%       100% \n 0.1111111  0.7147312  0.7866515  0.8763293 19.0000000 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 4,   # <<< 4 quantiles\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n**Warning: Maps Lie!**\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\nFixed intervals\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          #n = 5,\n          style = \"fixed\",\n          breaks = c(0,15,19) ) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          #n = 5,\n          style = \"fixed\",\n          breaks = c(0,0.5,1,6,8,10,12,14,16,18,20) ) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nKmeans\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n**Types of classification methods**\n\n::: callout-note\nThe \"fixed\" style permits a \"classIntervals\" object to be specified with given breaks, set in the **`fixedBreaks`** argument; the length of **`fixedBreaks`** should be n+1; this style can be used to insert rounded break values.\n\nThe \"sd\" style chooses breaks based on **`pretty`** of the centred and scaled variables, and may have a number of classes different from n; the returned **`par=`** includes the centre and scale values.\n\nThe \"equal\" style divides the range of the variable into n parts.\n\nThe \"pretty\" style chooses a number of breaks not necessarily equal to n using **`pretty`**, but likely to be legible; arguments to **`pretty`** may be passed through **`...`**.\n\nThe \"quantile\" style provides quantile breaks; arguments to **`quantile`** may be passed through **`...`**.\n\nThe \"kmeans\" style uses **`kmeans`** to generate the breaks; it may be anchored using **`set.seed`**; the **`pars`** attribute returns the kmeans object generated; if **`kmeans`** fails, a jittered input vector containing **`rtimes`** replications of **`var`** is tried \\-\\-- with few unique values in **`var`**, this can prove necessary; arguments to **`kmeans`** may be passed through\n\nThe \"jenks\" style has been ported from Jenks' code, and has been checked for consistency with ArcView, ArcGIS, and MapInfo (with some remaining differences); added here thanks to Hisaji Ono (originally reported as Basic, now seen as Fortran (as described in a talk last seen at http://www.irlogi.ie/wp-content/uploads/2016/11/NUIM_ChoroHarmful.pdf, slides 26-27)). Note that the sense of interval closure is reversed from the other styles, and in this implementation has to be right-closed - use cutlabels=TRUE in **`findColours`** on the object returned to show the closure clearly, and use **`findCols`** to extract the classes for each value. This style will subsample by default for more than 3000 observations.\n:::\n\n#### 21.4.3.2 Plotting choropleth map with custom break\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(mpsz_pop2020$DEPENDENCY, \n         probs = seq(0,1,0.25),\n         na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        0%        25%        50%        75%       100% \n 0.1111111  0.7147312  0.7866515  0.8763293 19.0000000 \n```\n:::\n:::\n\n\n\\-\\-\\-- TBC on break points -\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n### \n**21.4.4 Colour Scheme**\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### 21.4.4.1 Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n =6,\n          style = 'quantile',\n          palette = 'Blues') +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nNotice that the choropleth map is shaded in green.\n\nTo reverse the colour shading, add a \\\"-\\\" prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nThe colour scheme has been reverse. The brighter green regions represents high dependency ratio.\n\n### **21.4.5 Map Layouts**\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n#### 21.4.5.1 Map Legend\n\nIn **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE,  # <<<< add hist (follow classification method)\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  \n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n#### 21.4.5.2 Map style\n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.\n\nThe code chunk below shows the *classic* style is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-- CONTINUE\\_\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--\n\nTo reset the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n### **21.4.6 Drawing Small Multiple Choropleth Maps**\n\ndo not need to use facet all the time, can change the fill format like below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-- continue -------\n\n#### 21.4.6.2 By defining a group-by variable in *tm_facets()*\n\nIn this example, multiple small choropleth maps are created by using **tm_facets()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE,  #<<<<<<< only plot the region PLUS enlarge it\n            drop.units=FALSE) +  #<< if TRUE, will not plot the empty color part of fill\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n#### 21.4.6.3 By creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating multiple STAND_ALONE maps with **tmap_arrange()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#standalone 1\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\n#standalone 2\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n### **21.4.7 Mappping Spatial Object Meeting a Selection Criterion**\n\nInstead of creating small multiple choropleth map, you can also use **selection funtion** to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex16_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#quantile(list, percentile break)\nquantile(c(0:10),c(0.2,0.4,0.5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20% 40% 50% \n  2   4   5 \n```\n:::\n:::\n\n\n## **18.5 Reference**\n\n### **18.5.1 All about tmap package**\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/)\n\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### **18.5.2 Geospatial data wrangling**\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)\n\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### **18.5.3 Data wrangling**\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n\n-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n",
    "supporting": [
      "Hands-on_Ex16_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}