{
  "hash": "0b2bbbb4da257918ce6d1534468bdce8",
  "result": {
    "markdown": "---\ntitle: \"Hands-on_Ex08 (Network graphs)\"\nauthor: \"NYX\"\ndate: '13 May 2023'\ndate-modified: \"2023-05-13\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat:\n  html:\n    code-fold: True\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n::: {.cell}\n\n:::\n\n\n# **Lesson 5: Network Data Visualisation and Analysis**\n\n\\*located inchapter 27 of Prof's [E-book](https://r4va.netlify.app/chap27.html)\n\n## Overview\n\nIn this hands-on exercise, I will learn how to model, analyse and visualise network data using R.\n\nBy the end of this hands-on exercise, I will be able to:\n\n-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,\n\n-   build network graph visualisation using appropriate functions of *ggraph*,\n\n-   compute network geometrics using *tidygraph*,\n\n-   build advanced graph visualisation by incorporating the network geometrics, and\n\n-   build interactive network visualisation using *visNetwork* package.\n\n## 27.2 Getting Started\n\n### 27.2.1 Installing and launching R packages\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and [lubridate](https://lubridate.tidyverse.org/), an R package specially designed to handle and wrangling **time** data will be installed and launched too.\n\nThe code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npacman::p_load(igraph, tidygraph, ggraph,\n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts,knitr)\n```\n:::\n\n\n## 27.3 The Data\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n### 27.3.1 The edges data\n\n-   *GAStech-email_edges.csv* which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n![](https://r4va.netlify.app/chap27/img/image2.jpg)\n\n### 27.3.2 The nodes data\n\n-   *GAStech_email_nodes.csv* which consist of the names, department and title of the 55 employees.\n\n![](https://r4va.netlify.app/chap27/img/image1.jpg)\n\n### 27.3.3 Importing network data from files\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using `read_csv()` of **readr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_nodes <- read_csv('data/GAStech_email_node.csv')\nGAStech_edges <- read_csv('data/GAStech_email_edge-v2.csv')\n```\n:::\n\n\n### 27.3.4 Reviewing the imported data\n\nNext, we will examine the structure of the data frame using *glimpse()* of **dplyr**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# list()\n# summary()\n# class ()\n```\n:::\n\n\n::: callout-warning\nThe output report of GAStech_edges above reveals that the *SentDate* is treated as \"Character\" data type instead of *date* data type. We have to change the data type of *SentDate* field back to \"Date\"\" data type.\n:::\n\n### 27.3.5 Wrangling time\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nGAStech_edges <- GAStech_edges %>% \n  mutate(SentDate = dmy(SentDate)) %>% \n  mutate(Weekday = wday(SentDate,\n                         label = TRUE,  # ordered factor if true\n                         abbr = FALSE))\n```\n:::\n\n\n::: callout-note\n## Learning from codes above\n\n-   both *dmy()* and *wday()* are functions of **lubridate** package. [lubridate](https://r4va.netlify.app/cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html) is an R package that makes it easier to work with dates and times.\n\n-   *dmy()* transforms the SentDate to Date data type.\n\n-   *wday()* returns the day of the week as a decimal number (1-7) or an ordered factor (Monday, Tuesday,..) if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of *wday()* will save in this newly created field.\n\n-   the values in the *Weekday* field are in ordinal scale.\n:::\n\n### 27.3.6 Reviewing the revised date fields\n\nTable below shows the data structure of the reformatted *GAStech_edges* with the correct data formats.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 9,063\nColumns: 9\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ Weekday     <ord> Monday, Monday, Monday, Monday, Monday, Monday, Monday, Mo…\n```\n:::\n:::\n\n\n### 27.3.7 Wrangling attributes\n\nA close examination of *GAStech_edges* data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\n\nIn view of this, we will\n\n-   filter `Work related` emails\n\n-   group-by senders, receivers and day of week\n\n-   aggregate to get the total count of each unique combination of the above to get `Weight` as a new column\n\n-   filter twice to remove self-loops and edges that occurred only once\n\n-   **`ungroup()`** function is used to remove the grouping created by **`group_by()`** so that the resulting dataframe is not grouped by any variable(s) anymore. This is useful when we want to apply further operations or analysis to the individual rows of data rather than grouped results.\n\nThe code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nGAStech_edges_aggregated <- GAStech_edges %>% \n  filter(MainSubject=='Work related') %>% \n  group_by(source, target, Weekday) %>% \n  summarise(Weight = n()) %>% \n  filter(source != target) %>% \n  filter(Weight >1) %>% \n  ungroup()\n```\n:::\n\n\n::: callout-note\n## Things to learn from code above\n\n-   four functions from **dplyr** package are used. They are: *filter()*, *group()*, *summarise()*, and *ungroup()*.\n\n-   The output data.frame is called **GAStech_edges_aggregated**.\n\n-   A new field called *Weight* has been added in GAStech_edges_aggregated.\n:::\n\n### 27.3.8 Reviewing the revised edges file\n\nTable below shows the data structure of the reformatted *GAStech_edges_aggregated* data frame\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,456\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7,…\n$ Weekday <ord> Monday, Tuesday, Wednesday, Friday, Monday, Tuesday, Wednesday…\n$ Weight  <int> 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4,…\n```\n:::\n:::\n\n\n## 27.4 Creating network objects using **tidygraph**\n\nIn this section, Iwill learn how to create a graph data model by using **tidygraph** package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. `tidygraph` provides a way\n\n-   to switch between the two tables and provides dplyr verbs for manipulating them.\n\n-   to access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\nBefore getting started, please read these two articles:\n\n-   [Introducing tidygraph](https://www.data-imaginist.com/2017/introducing-tidygraph/)\n\n-   [tidygraph 1.1 - A tidy hope](https://www.data-imaginist.com/2018/tidygraph-1-1-a-tidy-hope/)\n\n### 27.4.1 The **tbl_graph** object\n\nTwo functions of **tidygraph** package can be used to create network objects, they are:\n\n-   [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) **creates** a **tbl_graph** network object from nodes and edges data.\n\n-   [`as_tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) **converts** network data and objects to a **tbl_graph** network. Below are network data and objects supported by `as_tbl_graph()`\n\n    -   a node data.frame and an edge data.frame,\n\n    -   data.frame, list, matrix from base,\n\n    -   igraph from igraph,\n\n    -   network from network,\n\n    -   dendrogram and hclust from stats,\n\n    -   Node from data.tree,\n\n    -   phylo and evonet from ape, and\n\n    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n### 27.4.2 The **dplyr** verbs in **tidygraph**\n\n-   *activate()* verb from **tidygraph** serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to **tbl_graph** object are applied to the active tibble.\n\n![](https://r4va.netlify.app/chap27/img/image3.jpg){width=\"756\"}\n\n-   In the above the *.N()* function is used to gain access to the node data while manipulating the edge data. Similarly *.E()* will give you the edge data and *.G()* will give you the **tbl_graph** object itself.\n\n-   **`%>% mutate(Species = ifelse(leaf, as.character(iris$Species)[label], NA))`** - This line adds a new column called **`Species`** to the **`nodes`** data frame. The **`ifelse()`** function assigns a value to this column based on whether the node is a leaf or not. If it is a leaf, the value is taken from the **`label`** column of the **`iris$Species`** data frame (which contains the actual species names), and if it is not a leaf, the value is set to **`NA`**.\n\n-   **`%>% mutate(to_setose = .N()$Species[to] == 'setosa')`** - This line adds a new column called **`to_setose`** to the **`edges`** data frame. The **`ifelse()`** function assigns a value to this column based on whether the target node of each edge is a member of the **`setosa`** species or not. The **`to`** variable refers to the index of the target node in the **`nodes`** data frame, and the **`.N()`** function allows access to the **`Species`** column of the **`nodes`** data frame.\n\n### 27.4.3 Using `tbl_graph()` to build tidygraph data model.\n\nIn this section, you will use `tbl_graph()` of **tinygraph** package to build an tidygraph's network graph data.frame.\n\nBefore typing the codes, you are recommended to review to reference guide of [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph<- tbl_graph(nodes=GAStech_nodes,\n                          edges = GAStech_edges_aggregated,\n                          directed = TRUE)\n```\n:::\n\n\n### 27.4.4 Reviewing the output tidygraph's graph object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 54 nodes and 1456 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,456 × 4\n   from    to Weekday   Weight\n  <int> <int> <ord>      <int>\n1     1     2 Monday         4\n2     1     2 Tuesday        3\n3     1     2 Wednesday      5\n# ℹ 1,453 more rows\n```\n:::\n:::\n\n\n-   The output above reveals that *GAStech_graph* is a tbl_graph object with 54 nodes and 4541 edges.\n\n-   The command also prints the first six rows of \"Node Data\" and the first three of \"Edge Data\".\n\n-   It states that the Node Data is **active (Node data is on top of Edge data)**. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n### 27.4.6 Changing the active object\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the *activate()* function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest \"weight\" first, we could use *activate()* and then *arrange()*.\n\nFor example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph %>% \n  activate(edges) %>% \n  arrange(desc(Weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 54 nodes and 1456 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,456 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1    40    41 Tuesday     23\n2    40    43 Tuesday     19\n3    41    43 Tuesday     15\n4    41    40 Tuesday     14\n5    42    41 Tuesday     13\n6    42    40 Tuesday     12\n# ℹ 1,450 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n```\n:::\n:::\n\n\nVisit the reference guide of [*activate()*](https://tidygraph.data-imaginist.com/reference/activate.html) to find out more about the function.\n\n## 27.5 Plotting Static Network Graphs with **ggraph** package\n\n[**ggraph**](https://ggraph.data-imaginist.com/) is an extension of **ggplot2**, making it easier to carry over basic ggplot skills to the design of network graphs.\n\nAs in all network graph, there are three main aspects to a **ggraph**'s network graph, they are:\n\n-   [nodes](https://cran.r-project.org/web/packages/ggraph/vignettes/Nodes.html),\n\n-   [edges](https://cran.r-project.org/web/packages/ggraph/vignettes/Edges.html) and\n\n-   [layouts](https://cran.r-project.org/web/packages/ggraph/vignettes/Layouts.html).\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n### 27.5.1 Plotting a basic network graph\n\nThe code chunk below uses [*ggraph()*](https://ggraph.data-imaginist.com/reference/ggraph.html), [*geom-edge_link()*](https://ggraph.data-imaginist.com/reference/geom_edge_link.html) and [*geom_node_point()*](https://ggraph.data-imaginist.com/reference/geom_node_point.html) to plot a network graph by using *GAStech_graph*. Before getting started, it is advisable to read their respective reference guide at least once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(GAStech_graph) +  #<<< GAStech_graph is a tbl_graph object\n  geom_edge_link() +\n  geom_node_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Things to learn from code chunk above\n\n-   The basic plotting function is `ggraph()`, which takes the data to be used for the graph and the type of layout desired. Both of the arguments for `ggraph()` are built around *igraph*. Therefore, `ggraph()` canaccept either an *igraph* object or a *tbl_graph* object.\n\n-   **`igraph`** uses an adjacency matrix or an edge list and is more focused on traditional graph theory algorithms and operations.\n\n    In an edge list, each row represents an edge, with the first two columns containing the indices of the nodes that the edge connects.\n\n-   **`tidygraph`** uses a **`tbl_graph`** object, which is a tidy data frame representation of a graph. The **`nodes`** and **`edges`** data frames contain the metadata about the nodes and edges, respectively, and can be manipulated using the **`dplyr`** syntax\n:::\n\n### 27.5.2 Changing the default network graph theme\n\nIn this section, use [*theme_graph()*](https://ggraph.data-imaginist.com/reference/theme_graph.html) to remove the x and y axes. Before getting started, it is advisable to read it's reference guide at least once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph) +  #<<< GAStech_graph is a tbl_graph object\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Things to learn form codes above\n\n-   **ggraph** introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. `theme_graph()`, besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\n\n<!-- -->\n\n-   The ggraph theme can be set for a series of plots with the `set_graph_style()` command run before the graphs are plotted or by using `theme_graph()` in the individual plots.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph) +  #<<< GAStech_graph is a tbl_graph object\n  geom_edge_link(aes(colour ='grey50'),show.legend = FALSE) +  #<< refer to ggraph documentation\n  geom_node_point(aes(colour ='grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'orange')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 27.5.4 Working with **ggraph**\\'s layouts\n\n**ggraph** support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by `ggraph()`.\n\n![](https://r4va.netlify.app/chap27/img/image4.jpg){width=\"478\"} ![](https://r4va.netlify.app/chap27/img/image5.jpg){width=\"478\"}\n\n### 27.5.5 Fruchterman and Reingold layout\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n**To change the layout of ggraphs, refer to [ggraph_layout](https://www.data-imaginist.com/2017/ggraph-introduction-layouts/)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph, layout='star') +  #<<< refer to ggraph_layout link above\n  geom_edge_link(aes()) +  #<< refer to ggraph documentation\n  geom_node_point(aes())\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Things to learn from the codes above\n\n-   *layout* argument is used to define the layout to be used.\n:::\n\n### 27.5.6 Modifying network nodes\n\nIn this section, you will colour each node by referring to their respective departments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph, layout='nicely') +  #<<< refer to ggraph_layout link above\n  geom_edge_link(aes()) +  #<< refer to ggraph documentation\n  geom_node_point(aes(colour=Department, size =3))\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Things to learn from the code\n\n-   *geom_node_point* is equivalent in functionality to *geo_point* of **ggplot2**. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n:::\n\n### 27.5.7 Modifying edges\n\nIn the code chunk below, the thickness of the edges will be mapped with the *Weight* variable.\n[geom_edge_link](https://www.rdocumentation.org/packages/ggraph/versions/2.1.0/topics/geom_edge_link) search individually\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggraph(GAStech_graph, layout='nicely') +  #<<< refer to ggraph_layout link above\n  geom_edge_link(aes(width=Weight, alpha= 0.2)) +  #<< thickness by weight and change alpha\n  scale_edge_width(range = c(0.1, 5)) +  #<< control max size of edge , else my plot is ugly\n  geom_node_point(aes(colour=Department, size =3))\n\ng + theme_graph()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Things to learn from codes above\n\n-   *geom_edge_link* draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument *width* is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n:::\n\n## 27.6 Creating facet graphs\n\nAnother very useful feature of **ggraph** is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\n\nThere are three functions in ggraph to implement faceting, they are:\n\n-   [*facet_nodes()*](https://r4va.netlify.app/chap27.html) whereby edges are only draw in a panel if both terminal nodes are present here,\n\n-   [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\n\n-   [*facet_graph()*](https://ggraph.data-imaginist.com/reference/facet_graph.html) faceting on two variables simultaneously.\n\n### 27.6.1 Working with *facet_edges()*\n\nIn the code chunk below, [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) is used. Before getting started, it is advisable for you to read it\\'s reference guide at least once. Also can refer to [*ggraph()*](https://ggraph.data-imaginist.com/reference/ggraph.html).\n",
    "supporting": [
      "Hands-on_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}