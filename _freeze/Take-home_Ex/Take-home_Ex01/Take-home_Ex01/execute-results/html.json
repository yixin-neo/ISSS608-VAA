{
  "hash": "1368a920ad2f12c8e089d2715dbbdfe8",
  "result": {
    "markdown": "---\ntitle: \"Take-home_Ex01\"\nauthor: \"NeoYX\"\ndate: '7 May 2023'\n#date-modified: \"2023-05-07\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\n  html:\n    code-fold: True\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n# 1. Task and Dataset\n\nThis exerises aims to reveal the demographic and financial characteristics of the city of Engagement, using appropriate **static and interactive statistical graphics** methods. It also requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.\n\nThe dataset consists of a sample survey of 1000 representative residents that collects data related to their household demographic and spending patterns, among other things. There are primarily two datasets used in this exercise\n\n-   'FinancialJournal.csv\": Contains 1513635 number of daily transaction records (different categories of income and expenses) over a period of twelve months from March 2022 to February 2023.\n\n<!-- -->\n\n-   'Particpants.csv\" : Contains demographics information like household size, age, education level, interest groups, joviality index and whether each household has kids.\n\nIn this exercise, each dataset will be cleansed separately and then joined by 'participantID' as primary key to form the final dataset used for further analysis.\n\n# \n\n# 2. Data Preparation\n\n## 2.1 Install and load the required libraries\n\nThe code chunk below uses `pacman::p_load()` to check if packages are installed. If they are, they will be launched into R. The packages installed are\n\n-   `plotly`: Used for creating interactive web-based graphs.\n\n-   `knitr`: Used for dynamic report generation\n\n-   `patchwork`: Used to combine plots\n\n-   `tidyverse`: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\n\n-   `ggthemes`: Provide additional themes for `ggplot2`\n\n-   `ggstatsplot`: Used for creating graphics with details from statistical tests.\n\n-   `ggdist`: Used for visualising distribution and uncertainty\n\n-   \n\n-   \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(plotly, knitr, patchwork, tidyverse, ggthemes, ggstatsplot, ggdist, png, gifski, nortest)\n```\n:::\n\n\n## 2.2 Import the dataset\n\nThe datasets are imported using `tidyverse`'s `readr::read_csv()` function.\n\n'FinancialJournal.csv\" is stored as `finance` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinance <- read_csv('data/FinancialJournal.csv')\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  participantId timestamp           category  amount\n          <dbl> <dttm>              <chr>      <dbl>\n1             0 2022-03-01 00:00:00 Wage      2473. \n2             0 2022-03-01 00:00:00 Shelter   -555. \n3             0 2022-03-01 00:00:00 Education  -38.0\n4             1 2022-03-01 00:00:00 Wage      2047. \n5             1 2022-03-01 00:00:00 Shelter   -555. \n6             1 2022-03-01 00:00:00 Education  -38.0\n```\n:::\n:::\n\n\nCheck for empty values in the `finance` table using the `is.na()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(finance))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n'Particpants.csv\" is stored as `ptcp` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nptcp <- read_csv('data/Participants.csv')\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  participantId householdSize haveKids   age educationLevel      interestGroup\n          <dbl>         <dbl> <lgl>    <dbl> <chr>               <chr>        \n1             0             3 TRUE        36 HighSchoolOrCollege H            \n2             1             3 TRUE        25 HighSchoolOrCollege B            \n3             2             3 TRUE        35 HighSchoolOrCollege A            \n4             3             3 TRUE        21 HighSchoolOrCollege I            \n5             4             3 TRUE        43 Bachelors           H            \n6             5             3 TRUE        32 HighSchoolOrCollege D            \n# ℹ 1 more variable: joviality <dbl>\n```\n:::\n:::\n\n\nChecking for empty values in `ptcp` table using the `is.na()`\\` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(ptcp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## 2.3 Data Issues and wrangling\n\nI will discuss the issues in the datasets and proposed cleaning methods.\n\n### `finance` dataset issues:\n\n-   **participantId** should be converted from `<dbl>` format to `<chr>` format. It should be a categorical and not numerical data type.\n\n-   **timestamp** should be converted from `<dttm>` format to `<date>` format as I will not be analysing time in this exercise.\n\n-   Negative values of **amount** that belong to the expenses categories should be converted to positive values. The amount will also be rounded to two decimal places.\n\nThe code chunk below does the following:\n\n-   use the **`as.character()`** function to convert **participantId** to `<chr>` format\n\n-   create a new column **month_year** by extracting the year and month from the **timestamp** column using the **`format()`** function with the **`%Y-%m`** format specifier.\n\n-   use the **`abs()`** function to convert negative values **amount** to positive and round the values to 2 decimal places using the **`round()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert participantId to character\nfinance <- finance %>% mutate(participantId = as.character(participantId))\n\n# Extract month and year from timestamp\nfinance <- finance %>% \n  mutate(month_year = format(timestamp, \"%m-%Y\"))\n\n# Transform negative amounts to positive and round to 2 decimal places\nfinance <- finance %>% \n  mutate(amount = abs(amount),\n         amount = round(amount, 2))\n```\n:::\n\n\nA check for duplicates using the `duplicated()` function reveals that there are 1,113 records of duplicates.\n\n-   The **`duplicated()`** function to identify the duplicate rows. It returns a logical vector indicating whether each row is a duplicate of a previous row in the data frame. We can then use this logical vector to subset the data frame and show the duplicate rows. The logical vector is stored in a filter **duplicated_rows** which is used to subset the `finance` data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show duplicate rows\nduplicated_rows <- finance[duplicated(finance),]\nglimpse(duplicated_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,113\nColumns: 5\n$ participantId <chr> \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ timestamp     <dttm> 2022-03-01, 2022-03-01, 2022-03-01, 2022-03-01, 2022-03…\n$ category      <chr> \"Shelter\", \"Education\", \"Shelter\", \"Education\", \"Shelter…\n$ amount        <dbl> 554.99, 38.01, 554.99, 38.01, 556.55, 12.81, 554.99, 38.…\n$ month_year    <chr> \"03-2022\", \"03-2022\", \"03-2022\", \"03-2022\", \"03-2022\", \"…\n```\n:::\n:::\n\n\n-   **`unique()`** function is used to remove the duplicate rows form `finance` data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicate rows\nfinance <- unique(finance)\n```\n:::\n\n\n-   Perform a final check to verify that there are no more duplicate using `any()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(finance))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### `ptcp` dataset issues:\n\n-   **participantId** should be converted from `<dbl>` format to `<chr>` format\n\n-   **householdSize** should be converted from `<dbl>`{style=\"caret-color: white;\"} format to `<fct>`{style=\"caret-color: white;\"} format. It does not make sense to have 2.5 persons.\n\n-   **age** should be converted from `<dbl>`{style=\"caret-color: white;\"} format to `<int>`{style=\"caret-color: white;\"} format.\n\n-   **educationLevel** should be converted from `<chr>` to `<fct>` . It should also be ordered according to 'Low', 'HighSchoolOrCollege', 'Bachelors' and 'Graduate'.\n\nThe code chunk below does the following:\n\n-   `as.character` and `as.factor` functions are used to convert **participantId** to `<chr>` , **householdSize** to `<fct>` and **age** to `<int>`.\n\n-   `factor(educationLevel, levels=c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\")))` not only converts **educationLevel** to factor, but also order the values inside.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert to factor\nptcp <- ptcp %>% mutate(participantId = as.character(participantId))\nptcp <- ptcp %>% mutate(householdSize = as.factor(householdSize))\n\n# Convert educationLevel to factor and order accordingly\nptcp <- ptcp %>% mutate(educationLevel = factor(educationLevel, levels=c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\")))\n\n# convert age to int\nptcp <- ptcp %>% mutate(age = as.integer(age))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ptcp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,011\nColumns: 7\n$ participantId  <chr> \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",…\n$ householdSize  <fct> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ haveKids       <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T…\n$ age            <int> 36, 25, 35, 21, 43, 32, 26, 27, 20, 35, 48, 27, 34, 18,…\n$ educationLevel <fct> HighSchoolOrCollege, HighSchoolOrCollege, HighSchoolOrC…\n$ interestGroup  <chr> \"H\", \"B\", \"A\", \"I\", \"H\", \"D\", \"I\", \"A\", \"G\", \"D\", \"D\", …\n$ joviality      <dbl> 0.001626703, 0.328086500, 0.393469590, 0.138063446, 0.8…\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}