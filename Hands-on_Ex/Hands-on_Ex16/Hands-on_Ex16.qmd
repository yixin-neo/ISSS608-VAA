---
title: "Hands-on Exercise 16 (Week 8: Choropleth Map)"
author: "NYX"
date: '9 June 2023'
date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
format:
  html:
    code-fold: True
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

## **18.1 Overview**

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

In this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called [**tmap**](https://cran.r-project.org/web/packages/tmap/) package.

## **18.2 Getting Started**

In this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

The code chunk below will be used to install and load these packages in RStudio.

```{r}
pacman::p_load(sf,tmap,tidyverse, knitr)
```

We only have to install **tidyverse** instead of **readr**, **tidyr** and **dplyr** individually.

**18.3.1 The Data**

Two data set will be used to create the choropleth map. They are:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in **ESRI shapefile format**. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an **aspatial data file**. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it\'s `PA` and `SZ` (FK) fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile (`SUBZONE_N` as join key). Aim to get `geometry` column from shapefile.

### **18.3.2 Importing Geospatial Data into R**

The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn= 'data/geospatial',
                layer = 'MP14_SUBZONE_WEB_PL')
```

```{r}
class(mpsz)
```

To examine the content of `mpsz`,

under geometry type there could be :

-   mutlipolygon

-   multistring

-   point

```{r}
head(mpsz,5)
```

**18.3.3 Importing Attribute Data into R**

Next, we will import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*. \<\-- aspatial file

The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
popdata <- read_csv('data/aspatial/respopagesextod2011to2020.csv')
```

```{r}
#summary(popdata)
glimpse(popdata)
```

### **18.3.4 Data Preparation**

Before a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

#### 18.3.4.1 Data wrangling

The following data wrangling and transformation functions will be used:

-   *`pivot_wider()`* of **tidyr** package, and

-   *`mutate()`*, *`filter()`*, *`group_by()`* and *`select()`* of **dplyr** package

```{r}
unique(popdata$AG)
```

```{r}
popdata2020 <- popdata %>% 
  filter(Time == 2020) %>% 
  group_by(PA,SZ,AG) %>%   #<<< to calculate sum of population of each combinatin of PA, SZ and AG 
  summarise (POP = sum(Pop))

kable(head(popdata2020,5))
```

```{r}
popdata2020 <- popdata %>% 
  filter(Time == 2020) %>% 
  group_by(PA,SZ,AG ) %>%   #<<< to calculate sum of population of each combinatin of PA, SZ and AG 
  summarise (POP = sum(Pop))  %>%  #<< at this point, we only have four columns (PA, SZ, AG, POP)
  ungroup() %>%  #<<< ungroup to release the grouping and continue with other wrangling
  pivot_wider(names_from = AG,
              values_from = POP)
kable(head(popdata2020,5))
```

```{r}
popdata2020 <- popdata %>% 
  filter(Time == 2020) %>% 
  group_by(PA,SZ,AG ) %>%   #<<< to calculate sum of population of each combinatin of PA, SZ and AG 
  summarise (POP = sum(Pop))  %>%  #<< at this point, we only have four columns (PA, SZ, AG, POP)
  ungroup() %>%  #<<< ungroup to release the grouping and continue with other wrangling
  pivot_wider(names_from = AG,
              values_from = POP) %>% 
  mutate(YOUNG = rowSums(.[3:5]) + rowSums(.[6])) %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:15])) %>% 
  mutate(AGED = rowSums(.[16:21])) %>% 
  mutate(TOTAL = rowSums(.[3:21])) %>% 
  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %>% 
  select(PA, SZ, YOUNG, 
         `ECONOMY ACTIVE`, AGED,
         TOTAL, DEPENDENCY)
 kable(head(popdata2020,5)) 
```

#### 
18.3.4.2 Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>% 
  mutate_at(.var = vars(PA, SZ),
            .funs = funs(toupper)) %>% 
  filter(`ECONOMY ACTIVE` >0)
```

::: callout-note
1.  **`mutate_at`** function: This function is used to modify multiple columns in a dataframe simultaneously. It allows you to specify the columns to be transformed and the transformation function to be applied.

2.  **`.var`** argument: It specifies the columns to be transformed. In this case, the columns are "PA" and "SZ" from the "popdata2020" dataframe.

3.  **`.funs`** argument: It specifies the transformation function(s) to be applied to the selected columns. In this case, the function **`toupper`** is used, which converts the text to uppercase.
:::

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* (mpsz) and *SZ* (popdata2020) as the common identifier.

The `geometry` column from mpsz sf file is shifted all the way to the back after left join. The output table is a sf file because mpsz (sf obj) is the left table.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c('SUBZONE_N' ='SZ'))
```

::: callout-note
-   *left_join()* of **dplyr** package is used with `mpsz` **simple feature** data frame as the left data table is to ensure that the output will be a **simple features** data frame.
:::

Write the mpsz_pop2020 as a rds file

```{r}
write_rds(mpsz_pop2020, 'data/rds/mpszpop2020.rds')
```

```{r}
plot(mpsz_pop2020)
```

## **18.4 Choropleth Mapping Geospatial Data Using *tmap***

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements. (More fine controls)

### **18.4.1 Plotting a choropleth map quickly by using *qtm()***

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

The code chunk below will draw a cartographic standard choropleth map as shown below.

```{r}
tmap_mode('plot')
#tmap_mode('view')
#tmap_options(check.and.fix = TRUE)
qtm(mpsz_pop2020,
    fill = 'DEPENDENCY')
```

::: callout-note
-   *tmap_mode()* with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)
:::

### 
**18.4.2 Creating a choropleth map by using *tmap*\'s elements**

Despite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**\'s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'quantile', #<< affect how values of DEPENDENCY is binned
          palette = 'Blues',
          title = "Dependency ratio") +
 tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
           main.title.position = "center",
           main.title.size = 1.2,
           legend.height = 0.45, 
           legend.width = 0.35,
           frame = TRUE) +
  
  tm_legend(position = c('right','bottom'),
            frame= TRUE) +

  tm_borders(alpha = 0.5) + #<< the outline of each SZ
  tm_compass(type="8star", size = 2) + #<< compass
  tm_scale_bar() + #<< the BW scale bar
  tm_grid(alpha =0.2) + #<< the plot grid lines
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
  
```

```{r}
quantile(mpsz_pop2020$DEPENDENCY, 
         probs = seq(0,1,0.2),
         na.rm=TRUE)
```

```{r}
#| echo: false
#| eval: false
quantile(mpsz_pop2020$DEPENDENCY, 
         probs = c(0,1,0.2,0.5),
         na.rm=TRUE)
```

#### 18.4.2.1 Drawing a base map

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.

In the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### 18.4.2.2 Drawing a choropleth map using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY") + 
  tm_grid(alpha =0.2)
```

::: callout-note
-   The default interval binning used to draw the choropleth map is called \"pretty\". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.

-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.

-   By default, Missing value will be shaded in grey.
:::

#### 21.4.2.3 Drawing a choropleth map using *tm_fill()* and \*tm_border()\*\*

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

The code chunk below draws a choropleth map by using *tm_fill()* alone.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

Notice that the planning subzones are shared according to the respective dependecy values

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1, #<< linewidth 
             alpha = 1,
             lty= 'dashed') #<< transparency
```

Notice that light-gray border lines have been added on the choropleth map.

The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside *alpha* argument, there are three other arguments for *tm_borders()*, they are:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is \"solid\".

### **18.4.3 Data classification methods of tmap**

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

#### 21.4.3.1 Plotting choropleth maps with built-in classification methods

The code chunk below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 8,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, *equal* data classification method is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

Notice that the distribution of **quantile** data classification method are more **evenly distributed** then e**qual** data classification method.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
quantile(mpsz_pop2020$DEPENDENCY, 
         probs = seq(0,1,0.25),
         na.rm=TRUE)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 4,   # <<< 4 quantiles
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

**Warning: Maps Lie!**


DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.

DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?

Fixed intervals

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          #n = 5,
          style = "fixed",
          breaks = c(0,15,19) ) +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          #n = 5,
          style = "fixed",
          breaks = c(0,0.5,1,6,8,10,12,14,16,18,20) ) +
  tm_borders(alpha = 0.5)
```

Kmeans

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

#### 21.4.3.2 Plotting choropleth map with custom break

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

Before we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
quantile(mpsz_pop2020$DEPENDENCY, 
         probs = seq(0,1,0.25),
         na.rm=TRUE)
```

\-\-\-- TBC on break points -

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

Now, we will plot the choropleth map by using the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

## **18.5 Reference**

### **18.5.1 All about tmap package**

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### **18.5.2 Geospatial data wrangling**

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### **18.5.3 Data wrangling**

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with \'spread()\' and \'gather()\' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
