---
title: "In-class_Ex01"
author: "NeoYX"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

# In-class Exercise 1: Programming Elegant DataVis with ggplot2

```{r}
pacman:: p_load(tidyverse)
```

```{r}
exam_data <- read_csv("data1/Exam_data.csv")
```

## Task 1: Plotting a bar chart

In this section, I will explore the theme_minimal() and change the gridline colours.

Reference website : [R bloggers](https://www.r-bloggers.com/2022/07/how-to-change-background-color-in-ggplot2-3/) (How to change the background colour of ggplot2?)

To modify components of a theme , refer to this ggplot2 [webpage](https://ggplot2.tidyverse.org/reference/theme.html)

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(fill ='lightblue', color ='black',linetype = 'dotted'),
        panel.grid.major = element_line (color= 'red', linetype = 'dotted'),
        panel.grid.minor = element_line (colour='green', size= 2, linetype = 'dotted'),
        plot.title= element_text(size=rel(2))) +
  ggtitle('Number of students by Race') +
  labs(y='Number of students')
```

## The code chunk

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(fill ='lightblue', color ='black', linetype = 'dotted'),
        panel.grid.major = element_line (color= 'red', linetype = 'dotted'),
        panel.grid.minor = element_line (colour='green', size= 2, linetype = 'dotted'),
        plot.title= element_text(size=rel(2))) +
  ggtitle('Number of students by Race') +
  labs(y='Number of students')
```
:::

## Task 2: Improve the data visualisation of an existing simple vertical bar chart

```{r}
#| code-fold: true
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar()
```

**There are several flaws in the design above, namely:**

1.  y-axis label is not clear (i.e. count)

2.  To support effective comparison, the bars should be sorted by their respective frequencies.

3.  For static graph, frequency values should be added to provide addition information. (labelled on the graph)

The design below is an improvised version with the following features:

1.  Both axes labelled clearly.

2.  Bars are sorted by - count (descending order).

3.  Count and percentage are labelled above the bars.

::: panel-tabset
#### The makeover design

```{r}
#| echo: false
exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n()) %>% 
  ggplot(aes(x = reorder(RACE, (-count)), y = count)) +
  geom_bar(stat = 'identity', color='black', fill = '#DD8888') +
  ylim(0,220) +
  geom_text(aes(label = paste0(count,', ', round(count/sum(count)*100,1), '%')),
            position = position_dodge(width = 0.8), vjust= -1, size = 3.5) +
  ggtitle('Distribution of Race') +
  labs(y='No. \nof \nPupils', x = 'Race') +
  theme(plot.title = element_text(face='bold', hjust = 0.5),   #bold title and center-justify
        axis.title.y=element_text(angle=0)) 
```

#### The code chunk (NYX)

```{r}
exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n())

```

THe output of the code below is C,M,I O

```{r}
t <- exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n())

reorder(t$RACE, (-t$count))

```

```{r}
#| eval: false
exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n()) %>% 
  ggplot(aes(x = reorder(RACE, (-count)), y = count)) +
  geom_bar(stat = 'identity', color='black', fill = '#DD8888') +
  ylim(0,220) +
  geom_text(aes(label = paste0(count,', ', round(count/sum(count)*100,1), '%')),
            position = position_dodge(width = 0.8), vjust= -1, size = 3.5) +
  ggtitle('Distribution of Race') +
  labs(y='No. \nof \nPupils', x = 'Race') +
  theme(plot.title = element_text(face='bold', hjust = 0.5),   #bold title and center-justify
        axis.title.y=element_text(angle=0)) 
```

[Meaning of the argument 'identity' in the 'stat' parameter:]{.underline}

If we provide the argument stat="identity" to geom_bar() then we're telling R to calculate the sum of the y variable, grouped by the x variable and use bars to display the sums

There are three arguments in the reorder() function. (1) categorical variable to be sorted (2) variable to sort (1) by (3) a function that returns numerical value on how to sort (1) by

References:

https://www.roelpeters.be/reorder-ggplot2-bar-chart-by-count/ http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization#bar-plot-with-labels

#### The code chunk (Prof Kam)

```{r}
ggplot(data=exam_data, 
       aes(x=reorder(RACE,RACE,
                     function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))

```

#### Understanding Reorder()

```         
Output of the code below is C,M,I,O
```

```{r}
reorder(exam_data$RACE,exam_data$RACE,function(x)-length(x))
```

#### Forcats package

```{r}
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

#### Understanding fct_infreq

```         
Output of the code below is also C,M,I,O
```

```{r}
fct_infreq(exam_data$RACE)
```

#### Another boxplot example

```         
this is the only example not plotting the count but based on another variable 'MATHS'. is this the reason why we do not need to input any argument in geom_bar()?
```

```{r}
ggplot(data = exam_data, aes(x = reorder(RACE, -MATHS, median), y = MATHS)) +
  geom_boxplot() +
  xlab("Race") +
  ylab("Math Score") +
  ggtitle("Math Scores by Race") +
  theme(plot.title = element_text(hjust = 0.5))

```

```{r}
reorder(exam_data$RACE, -exam_data$MATHS, median)
```
:::
