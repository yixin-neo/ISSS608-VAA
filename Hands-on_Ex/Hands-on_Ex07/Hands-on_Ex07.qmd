---
title: "Hands-on_Ex07"
author: "NeoYX"
date: '7 May 2023'
date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
  html:
    code-fold: True
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

```{r}
#| fig-width: 8
#| fig-height: 6
#| code-fold: True
```

# 11  Funnel Plots for Fair Comparisons

## 11.1 Overview

Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:

-   plotting funnel plots by using **funnelPlotR** package,

-   plotting static funnel plot by using ggplot2 package, and

-   plotting interactive funnel plot by using both **plotly R** and **ggplot2** packages.

## 11.2 Installing and Launching R Packages

In this exercise, four R packages will be used. They are:

-   **readr** for importing csv into R.

-   **FunnelPlotR** for creating funnel plot.

-   **ggplot2** for creating funnel plot manually.

-   **knitr** for building static html table.

-   **plotly** for creating interactive funnel plot.

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

## 11.3 Importing Data

In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.

The code chunk below imports the data into R and save it into a tibble data frame object called *covid19*.

-   `mutate_if` will convert columns in chr format as factor.

```{r}
covid19 <- read_csv('C:/yixin-neo/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex05/data/COVID-19_DKI_Jakarta.csv') %>% 
  mutate_if(is.character, as.factor)
```

```{r}
covid19
```

## 11.4 FunnelPlotR methods

[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot to generate funnel plots. It requires a `numerator` (events of interest), `denominator` (population to be considered) and `group`. The key arguments selected for customisation are:

-   `limit`: plot limits (95 or 99).

-   `label_outliers`: to label outliers (true or false).

-   `Poisson_limits`: to add Poisson limits to the plot.

-   `OD_adjust`: to add overdispersed limits to the plot.

-   `xrange` and `yrange`: to specify the range to display for axes, acts like a zoom function.

-   Other aesthetic components such as graph title, axis labels etc.

### 11.4.1 FunnelPlotR methods: The basic plot

The code chunk below plots a funnel plot.

```{r}
#| code-fold: True
funnel_plot(
  numerator = covid19$Positive,
  denominator = covid19$Death,
  group = covid19$`Sub-district`
)
```

Things to learn from the code chunk above.

-   `group` in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.

-   By default, `data_type`argument is "SR" (stands for standardised Ratio)

-   `limit`: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.

### 11.4.2 FunnelPlotR methods: Makeover 1

The changes made:

-   `data_type` changed to 'PR', which stands for proportions of deaths/positive cases. (derieved using numerator and denominator)

-   Ranges of x and y axes to suit the visualisation

```{r}
#| code-fold: True
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`,
  data_type = "PR",     #<<  proportions
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```

### 11.4.3 FunnelPlotR methods: Makeover 2

The changes made:

-   `label` = NA to remove the default outliers feature

-   Edited the x and y axis titles to understand the chart better.

```{r}
#| code-fold: True
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative \nTotal Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```

## 11.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods

In this section, Iwill gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance my working experience of ggplot2 to customise speciallised data visualisation like funnel plot.

### 11.5.1 Computing the basic derived fields

To plot the funnel plot from scratch, we need to derive **cumulative death rate** (rate) and **standard error of cumulative death rate** (rate.se). Take note that the formula for SE of Proportions will be used here. (Lecture 4 slide 25)

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

Next, the fit.mean is computed by using the code chunk below.

The function calculates the weighted mean of the **`rate`** column in the **`df`** data frame, where the weights are the inverse squares of the corresponding standard errors (**`rate.se`**).

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

```{r}
fit.mean
```

### 11.5.2 Calculate lower and upper limits for 95% and 99.9% CI

The code chunk below is used to compute the lower and upper limits for 95% confidence interval.

The `number.seq` creates a sequence of numbers from 1 to the maximum number of positive cases in the data frame. (max = 6231)

We then calculate the lower and upper 95% confidence intervals and the lower and upper 99.9% confidence intervals for the mean rate of death at each number in the sequence.

Finally, a new data frame **`dfCI`** is created that contains the lower and upper confidence intervals and mean rate of death for each number in the sequence.

```{r}
#| code-fold: True
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 

# creates a new dataframe using data.frame()
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

### 11.5.3 Plotting a static funnel plot

In the code chunk below, ggplot2 functions are used to plot a **static** funnel plot.

```{r}
#| code-fold: True
p <- ggplot(df, aes(x = Positive, y = rate)) +  #<<< death rates vs positive case
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  
  # 95% line is dashed
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  
  # 99% line is solid
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

### 11.5.4 Interactive Funnel Plot: plotly + ggplot2

The funnel plot created using ggplot2 functions can be made interactive with `ggplotly()` of **plotly** r package.

```{r}
#| code-fold: True
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```
