---
title: "Take-home_Ex01"
author: "NeoYX"
date: '7 May 2023'
#date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
  html:
    code-fold: True
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

# 1. Task and Dataset

This exerises aims to reveal the demographic and financial characteristics of the city of Engagement, using appropriate **static and interactive statistical graphics** methods. It also requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.

The dataset consists of a sample survey of 1000 representative residents that collects data related to their household demographic and spending patterns, among other things. There are primarily two datasets used in this exercise

-   'FinancialJournal.csv": Contains 1513635 number of daily transaction records (different categories of income and expenses) over a period of twelve months from March 2022 to February 2023.

<!-- -->

-   'Particpants.csv" : Contains demographics information like household size, age, education level, interest groups, joviality index and whether each household has kids.

In this exercise, each dataset will be cleansed separately and then joined by 'participantID' as primary key to form the final dataset used for further analysis.

# 

# 2. Data Preparation

## 2.1 Install and load the required libraries

The code chunk below uses `pacman::p_load()` to check if packages are installed. If they are, they will be launched into R. The packages installed are

-   `plotly`: Used for creating interactive web-based graphs.

-   `knitr`: Used for dynamic report generation

-   `patchwork`: Used to combine plots

-   `tidyverse`: A collection of core packages designed for data science, used extensively for data preparation and wrangling.

-   `ggthemes`: Provide additional themes for `ggplot2`

-   `ggstatsplot`: Used for creating graphics with details from statistical tests.

-   `ggdist`: Used for visualising distribution and uncertainty

-   

-   

```{r}
pacman::p_load(plotly, knitr, patchwork, tidyverse, ggthemes,hrbrthemes, ggstatsplot, ggdist, png, gifski, nortest)
```

## 2.2 Import the dataset

The datasets are imported using `tidyverse`'s `readr::read_csv()` function.

'FinancialJournal.csv" is stored as `finance` variable.

```{r}
finance <- read_csv('data/FinancialJournal.csv')
```

```{r}
#| echo: false
head(finance)
```

Check for empty values in the `finance` table using the `is.na()` function.

```{r}
any(is.na(finance))
```

'Particpants.csv" is stored as `ptcp` variable.

```{r}
ptcp <- read_csv('data/Participants.csv')
```

```{r}
#| echo: false
head(ptcp)
```

Checking for empty values in `ptcp` table using the `is.na()`\` function.

```{r}
any(is.na(ptcp))
```

## 2.3 Data Issues and wrangling

I will discuss the issues in the datasets and proposed cleaning methods.

### 2.3.1 `finance` dataset issues:

-   **participantId** should be converted from `<dbl>` format to `<chr>` format. It should be a categorical and not numerical data type.

-   **timestamp** should be converted from `<dttm>` format to `<date>` format as I will not be analysing time in this exercise.

-   Negative values of **amount** that belong to the expenses categories should be converted to positive values. The amount will also be rounded to two decimal places.

The code chunk below does the following:

-   use the **`as.character()`** function to convert **participantId** to `<chr>` format

-   create a new column **month_year** by extracting the year and month from the **timestamp** column using the **`format()`** function with the **`%Y-%m`** format specifier.

-   use the **`abs()`** function to convert negative values **amount** to positive and round the values to 2 decimal places using the **`round()`** function.

```{r}

# Convert participantId to character
finance <- finance %>% mutate(participantId = as.character(participantId))

# Extract month and year from timestamp
finance <- finance %>% 
  mutate(month_year = format(timestamp, "%m-%Y"))

# Transform negative amounts to positive and round to 2 decimal places
finance <- finance %>% 
  mutate(amount = abs(amount),
         amount = round(amount, 2))

```

A check for duplicates using the `duplicated()` function reveals that there are 1,113 records of duplicates.

-   The **`duplicated()`** function to identify the duplicate rows. It returns a logical vector indicating whether each row is a duplicate of a previous row in the data frame. We can then use this logical vector to subset the data frame and show the duplicate rows. The logical vector is stored in a filter **duplicated_rows** which is used to subset the `finance` data.

```{r}
# Show duplicate rows
duplicated_rows <- finance[duplicated(finance),]
glimpse(duplicated_rows)
```

-   **`unique()`** function is used to remove the duplicate rows form `finance` data

```{r}
# Remove duplicate rows
finance <- unique(finance)
```

-   Perform a final check to verify that there are no more duplicate using `any()` function

```{r}
any(duplicated(finance))
```

The last thing to do is to create a new colunm **date** that is in \<date\> format using the `as.Date` function.

-   the paste0() function is used to concatenate "01-" with each value in the month_year column. This is because as.Date() requires a complete date in the format "dd-mm-yyyy"

    ```{r}
    finance$date <- as.Date(paste0("01-", finance$month_year), format = "%d-%m-%Y")
    ```

**Other issues**

When the `finance` dataset is groupby the **date** variable , it is noticed that the number of distinct participantID who took part in the survey was 1,011 in March 2022 and suddenly reduced to a constant value of 880 from April 2022 onwards. It seems to suggest that there are 131 residents who moved out of the city at the end of March 2022.

In the code chunk below:

-   dataset is group-by **date** and the distinct count of **participantID** is generated using `n_distinct` function

-   the **missing** dataframe is displayed below using `knitr::kable()` function

```{r}
missing_summary <- finance %>%
  group_by(date) %>% 
  summarise(n_distinct=n_distinct(participantId)) %>% 
  rename(`Number of unique participantId` = n_distinct)

knitr::kable(missing_summary, "simple")
```

Since 11 out of 12 months of records are missing for these 131 residents, we will delete their records from the `finance` dataset.

The code chunk below will extract the **participantIds** of residents whose records exists in March 22 but not in all April 22. The **participantIds** will be stored in a vector called **missing_id_vector.**

This code will filter the **`finance`** dataframe for rows with **`date`** equal to '2022-03-01', and then perform an anti-join with a filtered dataframe containing rows with **`date`** equal to '2022-04-01', based on the common **`participantId`** column. The resulting dataframe will only contain **`participantId`**s that are in '2022-03-01' but not in '2022-04-01'. The **`select`** function is used to extract the **`participantId`** column from the resulting dataframe.

In this code, we assign the result of your code to a variable named **`result`**. Then we use the **`pull()`** function to extract the **`participantId`** column from **`result`**. We pass the **`participantId`** column name as an argument to **`pull()`**. Next, we use the **`as.vector()`** function to convert the resulting tibble column to a vector. Finally, we assign the resulting vector to a variable named **`result_vector`** and print it. The resulting **`result_vector`** should be a numeric vector containing the unique **`participantId`** values from your code.

```{r}

missing_id <- finance %>%
  filter(date == as.Date('2022-03-01')) %>% # filter for '2022-03-01' date
  anti_join(finance %>%
             filter(date == as.Date('2022-04-01')), # filter for '2022-04-01' date
             by = 'participantId') %>% # anti-join by 'participantId'
  select(participantId) %>% 
  distinct(participantId)

# extract participantId column as convert this column to vector.
missing_id_vector <- as.vector(pull(missing_id, participantId))

missing_id_vector 

```

Next, we will remove all records of the 131 potentially non-residents from the `finance` dataset .

In the code chunk below:

we use the **`%in%`** operator to check if each **`id`** value is contained in the missing_id_vector. Then we use the negation operator **`!`** to negate this condition, which gives us a logical vector indicating which rows in **`df1`** should be included in the filtered data frame. Finally, we use this logical vector to index **`df1`** and extract only the rows that satisfy the condition. The resulting filtered data frame will not contain the rows where the **`id`** values are 4 or 5.

```{r}
finance1 <- finance[!finance$participantId %in% missing_id_vector, ]
finance1
```

We will double check that the records of 131 non-residents have been removed from `finance1` dataframe.

in the code below

we use the **`distinct()`** function to extract the distinct **`participantId`** values from **`finance1`**. We pass **`participantId`** as an argument to **`distinct()`** to extract only the unique values of this column. Finally, we use the **`n_distinct()`** function to count the number of distinct **`participantId`** values in the resulting tibble.

The resulting **`distinct_count`** variable should contain the count of distinct **`participantId`** values in **`finance1`**.

```{r}
finance1 %>% 
  distinct(participantId) %>% 
  n_distinct()
```

### 2.3.2 `ptcp` dataset issues:

-   **participantId** should be converted from `<dbl>` format to `<chr>` format

-   **householdSize** should be converted from `<dbl>`{style="caret-color: white;"} format to `<fct>`{style="caret-color: white;"} format. It does not make sense to have 2.5 persons.

-   **age** should be converted from `<dbl>`{style="caret-color: white;"} format to `<int>`{style="caret-color: white;"} format.

-   **educationLevel** should be converted from `<chr>` to `<fct>` . It should also be ordered according to 'Low', 'HighSchoolOrCollege', 'Bachelors' and 'Graduate'.

The code chunk below does the following:

-   `as.character` and `as.factor` functions are used to convert **participantId** to `<chr>` , **householdSize** to `<fct>` and **age** to `<int>`.

-   `factor(educationLevel, levels=c("Low", "HighSchoolOrCollege", "Bachelors", "Graduate")))` not only converts **educationLevel** to factor, but also order the values inside.

```{r}
# convert to factor
ptcp <- ptcp %>% mutate(participantId = as.character(participantId))
ptcp <- ptcp %>% mutate(householdSize = as.factor(householdSize))

# Convert educationLevel to factor and order accordingly
ptcp <- ptcp %>% mutate(educationLevel = factor(educationLevel, levels=c("Low", "HighSchoolOrCollege", "Bachelors", "Graduate")))

# convert age to int
ptcp <- ptcp %>% mutate(age = as.integer(age))
```

The columns format are all in order now.

```{r}
glimpse(ptcp)
```

Use `distinct()` and `n_distinct()` to check on the number of unique participantIds in `ptcp` table.

```{r}
ptcp %>% 
  distinct(participantId) %>% 
  n_distinct()
```

Currently, the `ptcp` table still contain the demographic records of the 131 residents who moved out. Let us remove their records by using similar method used in removing the same records in `financial` table.

```{r}
ptcp1 <- ptcp[!ptcp$participantId %in% missing_id_vector, ]

ptcp1 %>% 
  distinct(participantId) %>% 
  n_distinct()
```

Both `finance1` and `ptcp1` tables now contains information about the same number of participantIds.

### 2.3.3 Convert `finance1` table to wide format and perform left outer join with `ptcp1` table.

We will now convert the `finance1` dataframe from a long to a wide format. The code chunk below does the followingL

-   group the data by **participantId** , **date** and **category** using the **`group_by`** function

-   use the `sum` function to calculate the total monthly amount for each **category** per **participantId** per **month**

-   the `pivot_wider` function will convert the **category** column to wide format with total monthly values in the **amount** column.

    ```{r}
    finance1_wide<- finance1 %>%
      group_by(participantId, date, category) %>%
      summarise(total_amount = sum(amount)) %>%
      pivot_wider(names_from = category, values_from = total_amount)
    ```

    ```{r}
    #| echo: false
    finance1_wide
    ```

    ::: callout-note
    About finance1_wide table

    `finance_wide` is a table that has one row for each unique combination of **participantId** and **month** and one column for each unique category from the former `finance1` table.
    :::

    The code chunk below performs a left outer join with finance1_wide table (left) and ptcp1 table (right) with join key **participantId**.

    ```{r}
    # left outer join
    finance1_wide_ptcp1 <- left_join(finance1_wide, ptcp1, by = "participantId")
    ```

    The cleansed finance1_wide_ptcp1 is displayed using `knitr::kable()`{style="caret-color: white;"} function

    ```{r}
    knitr::kable(head(finance1_wide_ptcp1,24), "simple") 
    ```

    ```{r}
    finance1_wide_ptcp1
    ```

    # 3. Visualisation

    ## 3.1 High level EDA of city's monthly total income vs total expenses

    In this exercise, I will explore the dataset from high level and then zoom into interesting patterns (if I can find any =))

    We categorise Education, Food, Recreation, Shelter into **Expenses** while RentAdjustment, Wage are categorised into **Income**

    ```{r}
    highlevel <- finance1_wide_ptcp1 %>%
      group_by(date) %>%
      summarize(Education = sum(Education, na.rm = TRUE),
                Food = sum(Food, na.rm = TRUE),
                Recreation = sum(Recreation, na.rm = TRUE),
                Shelter = sum(Shelter, na.rm = TRUE),
                Wage = sum(Wage, na.rm = TRUE),
                RentAdjustment = sum(RentAdjustment, na.rm = TRUE),
                ExpenseP = sum(Education, Food, Recreation, Shelter),
                Income = sum(Wage, RentAdjustment),
                Saving = Income - ExpenseP,
                Expense = ExpenseP * -1
                )
    highlevel
    ```

    ```{r}
    ggplot(data=highlevel,
           aes(x=date,
               y=Income)) +
      geom_bar(stat="identity")
    ```

```{r}
library(scales)

h<-ggplot(highlevel) +
  geom_segment( aes(x=date, xend=date, y=Income, yend=Expense), color="grey") +
  geom_point( aes(x=date, y=Income), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
  geom_point( aes(x=date, y=Expense), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
  geom_line(aes(x=date, y=Saving), color=rgb(0.2,0.2,0.9,0.5), size=1) +
  theme_light() +
  theme(#legend.position = "none",
        #panel.grid.major.y = element_line(color="grey", linetype="dashed"),
        axis.line.y = element_line(color="black", size=0.5, linetype="solid"),
        panel.grid.major.x = element_blank(),
        panel.border = element_blank(),
        axis.ticks.x = element_blank(),
        #panel.grid.major = element_line(color = "grey", linetype = "dotted", size = 0.5),
        axis.title.x=element_text(angle = 0,
                                  vjust=0.9),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_date(date_breaks = '1 month',date_labels = "%b %Y") +
  scale_y_continuous(limits = c(-2000000, 6500000), breaks=seq(-2000000, 6500000, 1000000), labels= comma) +
  geom_hline(yintercept=0, color="black", size=0.5)+
  xlab("") +
  ylab("Amount")

ggplotly(h)

```

\

rgb colour the first three arguments (red, green, and blue) , the last argument (alpha)

```{r}
h<-ggplot(highlevel) +
  geom_segment( aes(x=date, xend=date, y=Income, yend=Expense, color="grey20"), size=0.6, alpha= 0.9) +
  geom_point( aes(x=date, y=Income, color="Income", shape="Income" , size = Income))+#, size=2 ) +
  geom_point( aes(x=date, y=Expense, color="Expense", shape="Expense", size = -Expense))+#, size=2 ) +
  geom_line(aes(x=date, y=Saving), color=rgb(0.2,0.2,0.9,0.9), size=1) +
  geom_text(aes(x=as.Date("2022-04-01"), y=max(Saving), label="Saving"), hjust=1, vjust=1, color=rgb(0.2,0.2,0.9,0.5), size=3.5) +
  
  theme_light() +
  theme(#legend.position = "none",
        axis.line.y = element_line(color="black", size=0.2, linetype="solid"),
        panel.grid.major.x = element_blank(),
        panel.border = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y=element_text(angle = 0,
                                  vjust=0.9),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_date(date_breaks = '1 month',date_labels = "%b %Y") +
  scale_y_continuous(limits = c(-2000000, 6500000), breaks=seq(-2000000, 6500000, 1000000), labels= comma) +
  
  scale_color_manual(values = c("Income" = rgb(0.2,0.7,0.1,0.9), "Expense" = rgb(0.7,0.2,0.1,0.9))) +
  scale_shape_manual(values = c("Income" = 16, "Expense" = 16)) +
  labs(color="Variable", shape="Variable") +
  guides(color = guide_legend(override.aes = list(size = 4))) +
  
  geom_hline(yintercept=0, color="black", size=0.2) +
  
  xlab("") +
  ylab("Amount") +
  ggtitle('City monthly total income, total expense and total savings')

ggplotly(h,
         tooltip = c("Income",
                     "Expense",
                     "Saving"))
```
