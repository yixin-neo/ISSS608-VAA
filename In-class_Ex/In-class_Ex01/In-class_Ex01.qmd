---
title: "In-class_Ex01"
author: "NeoYX"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

# In-class Exercise 1: Programming Elegant DataVis with ggplot2

```{r}
pacman:: p_load(tidyverse)
```

```{r}
exam_data <- read_csv("data1/Exam_data.csv")
```

## Task 1: Plotting a bar chart

In this section, I will explore the theme_minimal() and modify the components of a theme (e.g. plot fill and gridline colours).

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(fill ='lavender', color ='white',linetype ='solid'),
        panel.grid.major = element_line (color= 'white', linetype = 'solid'),
        panel.grid.minor = element_line (colour='white', size= 0.2, linetype = 'solid'),
        plot.title= element_text(size=rel(1.5))) +
  ggtitle('Number of students by Race') +
  labs(y='Number of students')
```

## The code chunk

```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(fill ='lavender', color ='white',linetype ='solid'),
        panel.grid.major = element_line (color= 'white', linetype = 'solid'),
        panel.grid.minor = element_line (colour='white', size= 0.2, linetype = 'solid'),
        plot.title= element_text(size=rel(1.5))) +
  ggtitle('Number of students by Race') +
  labs(y='Number of students')
```

Reference website : [R bloggers](https://www.r-bloggers.com/2022/07/how-to-change-background-color-in-ggplot2-3/) (How to change the background colour of ggplot2?)

To modify components of a theme , refer to this ggplot2 [webpage](https://ggplot2.tidyverse.org/reference/theme.html)
:::



## Task 2: Improve the data visualisation of an existing simple vertical bar chart


**There are several flaws in the design below, namely:**

1.  y-axis label is not clear (i.e. count)

2.  To support effective comparison, the bars should be sorted by their respective frequencies.

3.  For static graph, frequency values should be added to provide addition information. (labelled on the graph)

```{r}
#| code-fold: true
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar()
```

**The designs below are improvised versions with the following features:**

1.  Both axes labelled clearly.

2.  Bars are sorted by - count (descending order).

3.  Count and percentage are labelled above the bars.

::: panel-tabset
#### Makeover 1 (NYX)

```{r}
#| echo: false
exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n()) %>% 
  ggplot(aes(x = reorder(RACE, (-count)), y = count)) +
  geom_bar(stat = 'identity', color='black', fill = '#DD8888') +
  ylim(0,220) +
  geom_text(aes(label = paste0(count,', ', round(count/sum(count)*100,1), '%')),
            position = position_dodge(width = 0.8), vjust= -1, size = 3.5) +
  ggtitle('Distribution of Race') +
  labs(y='No. \nof \nPupils', x = 'Race') +
  theme(plot.title = element_text(face='bold', hjust = 0.5),   #bold title and center-justify
        axis.title.y=element_text(angle=0)) 
```

#### Makeover 1 code chunk

```{r}
exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n())

```

THe output of the code below is C,M,I O

```{r}
t <- exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n())

reorder(t$RACE, (-t$count))

```

```{r}
#| eval: false
exam_data %>%
  group_by(RACE) %>% 
  summarise(count = n()) %>% 
  ggplot(aes(x = reorder(RACE, (-count)), y = count)) +
  geom_bar(stat = 'identity', color='black', fill = '#DD8888') +
  ylim(0,220) +
  geom_text(aes(label = paste0(count,', ', round(count/sum(count)*100,1), '%')),
            position = position_dodge(width = 0.8), vjust= -1, size = 3.5) +
  ggtitle('Distribution of Race') +
  labs(y='No. \nof \nPupils', x = 'Race') +
  theme(plot.title = element_text(face='bold', hjust = 0.5),   #bold title and center-justify
        axis.title.y=element_text(angle=0)) 
```

*Meaning of the argument 'identity' in the 'stat' parameter:*

If we provide the argument stat="identity" to geom_bar() then we're telling R to calculate the sum of the y variable, grouped by the x variable and use bars to display the sums

There are three arguments in the reorder() function. 

(1) categorical variable to be sorted 

(2) variable to sort (1) by 

(3) a function that returns numerical value on how to sort (1) by

References:

https://www.roelpeters.be/reorder-ggplot2-bar-chart-by-count/ http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization#bar-plot-with-labels

:::

::: panel-tabset

#### Makeover 2 (Prof)
```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=reorder(RACE,RACE,
                     function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))

```

#### Makeover 2 code chunk

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x=reorder(RACE,RACE,
                     function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))

```

#### Understanding Reorder()

```         
Output of the code below is C,M,I,O
```

```{r}
reorder(exam_data$RACE,exam_data$RACE,function(x)-length(x))
```

:::

:::panel-tabset

#### Makeover 3 (Forcats package)

```{r}
#| echo: false
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

#### Makeover 3 code chunk
```{r}
#| eval: false
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```
#### Understanding fct_infreq

```         
Output of the code below is also C,M,I,O
```

```{r}
fct_infreq(exam_data$RACE)
```
:::

::: panel-tabset
#### Sorting a boxplot by median of Math scores

In the viz below, we are able to achieve several things in one go

1. sort the boxplot by median of the Math scores in descending order.

2. add mean value by Race

3. use colours to distinguish between outliers and jitters


```{r}
#| echo: false
ggplot(data = exam_data, aes(x = reorder(RACE, -MATHS, median), y = MATHS, fill=RACE)) +
   geom_boxplot(outlier.colour="blue", outlier.size=1) +
   geom_point(position = 'jitter',size=0.5) +
   stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="pink", fill="red") +
   xlab("Race") +
   ylab("Math Score") +
   ggtitle("Math Scores by Race") +
   scale_fill_brewer(palette='Set2') +
   theme(plot.title = element_text(hjust = 0.5),
         legend.position = 'none')


```
```{r}
#| eval: false
ggplot(data = exam_data, aes(x = reorder(RACE, -MATHS, median), y = MATHS, fill=RACE)) +
   geom_boxplot(outlier.colour="blue", outlier.size=1) +
   geom_point(position = 'jitter',size=0.5) +
   stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="pink", fill="red") +
   xlab("Race") +
   ylab("Math Score") +
   ggtitle("Math Scores by Race") +
   scale_fill_brewer(palette='Set2') +
   theme(plot.title = element_text(hjust = 0.5),
         legend.position = 'none')


```
Reference: [Link](https://r-graph-gallery.com/index.html)

#### Reorder()

```{r}
#| code-fold: true
reorder(exam_data$RACE, -exam_data$MATHS, median)
```
:::

## Task 3: Improve the data viz of an existing histogram

**There are several flaws in the design below, namely:** 

1. The outline of the bars is unclear

2.  Unable to see how the scores are binned

3.  Addition of reference line (e.g. 75th percentile) will help users get a better understanding of the data.   

```{r}
#| code-fold: true
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram(binwidth=5)
```


**The designs below are improvised version with the following features:**

Makeover 1: 

- Includes the 50th and 75th percentile line in the plot.

Makeover 2:

- Adding mean and median lines on the histogram plot.

- Change fill color and line color


::: panel-tabset
#### Makeover design 1 (NYX)


```{r}
#| echo: false
q <- quantile(exam_data$MATHS, probs = c(0.25, 0.5, 0.75))

ggplot(data=exam_data,
  aes(x=MATHS)) +
  geom_histogram(binwidth = 5, color='black',size= 0.3, fill = '#DD8888') +
  geom_vline(xintercept = q[2], linetype='dotted', size = 0.8, color='blue') +
  geom_vline(xintercept = q[3], linetype='dotted', size = 0.8) +
  annotate('text' , x= 70, y=50, label='50th \npercentile', size = 3) +
  annotate('text' , x= 90, y=50, label='75th \npercentile', size = 3) +
  labs(y= 'No. of \nPupils', x='math Score') +
  theme(axis.title.y=element_text(angle = 0)) +
  ggtitle('Distribution of Math scores')

```

#### Makeover 1 code chunk (NYX)

```{r}
#| eval:  false
q <- quantile(exam_data$MATHS, probs = c(0.25, 0.5, 0.75))

ggplot(data=exam_data,
  aes(x=MATHS)) +
  geom_histogram(binwidth = 5, color='black',size= 0.3, fill = '#DD8888') +
  geom_vline(xintercept = q[2], linetype='dotted', size = 0.8, color='blue') +
  geom_vline(xintercept = q[3], linetype='dotted', size = 0.8) +
  annotate('text' , x= 70, y=50, label='50th \npercentile', size = 3) +
  annotate('text' , x= 90, y=50, label='75th \npercentile', size = 3) +
  labs(y= 'No. of \nPupils', x='math Score') +
  theme(axis.title.y=element_text(angle = 0)) +
  ggtitle('Distribution of Math scores')

```

Reference: [link](https://community.rstudio.com/t/geom-histogram-labeling-25th-50th-75th-percentiles/148838/2)
:::

:::panel-tabset
#### Makeover Design 2 (Adapted from Prof)

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  geom_vline(aes(xintercept = mean(MATHS, na.rm=T)),
             color='red',
             linetype = 'dashed',
             size = 1) +
  annotate("text", x=65, y=50, label="mean", angle=0, size = 4) +
  geom_vline(aes(xintercept = median(MATHS, na.rm=T)),
             color='gray30',
             linetype = 'dashed',
             size = 1) +
  annotate("text", x=79, y=50, label="median", angle=0, size = 4)

```

#### Makeover 2 code chunk
```{r}
#| eval:  false
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  geom_vline(aes(xintercept = mean(MATHS, na.rm=T)),
             color='red',
             linetype = 'dashed',
             size = 1) +
  annotate("text", x=65, y=50, label="mean", angle=0, size = 4) +
  geom_vline(aes(xintercept = median(MATHS, na.rm=T)),
             color='gray30',
             linetype = 'dashed',
             size = 1) +
  annotate("text", x=79, y=50, label="median", angle=0, size = 4)

```


:::

## Task 4: Improve the data viz of exisiting distribution of English scores by gender.

The viz below shows the distribution by gender. How can we make it more informative? Could we try to add a background layer of histogram that describe the overall distribution of ENGLISH scores?


```{r}
#| code-fold: true

ggplot(data=exam_data,
       aes(x=ENGLISH, fill= GENDER)) +
  geom_histogram(bins=20) +
  facet_wrap(~GENDER)

```

The makeover design below now include overall distribution in the backgrounds of the trellis plots by gender. 


::: panel-tabset
#### Makeover design 1
```{r}
#| echo: false

d_bg <- exam_data[, -3]
ggplot(data=exam_data,
       aes(x=ENGLISH, fill=GENDER)) +
  geom_histogram(data=d_bg, bins=20, fill='grey',alpha=0.5) +
  geom_histogram(colour='black') +
  facet_wrap(~GENDER) +
  guides(fill=FALSE) + 
  theme_minimal() +
  labs(y= 'No. of \nPupils', x='English Score') +
  theme(axis.title.y=element_text(angle = 0)) +
  ggtitle('Distribution of English scores by Gender')
```
#### Makeover 1 code chunk

```{r}
#| eval: false

d_bg <- exam_data[, -3]  # background data without GENDER column
ggplot(data=exam_data,
       aes(x=ENGLISH, fill=GENDER)) +
  geom_histogram(data=d_bg, bins=20, fill='grey',alpha=0.5) +
  geom_histogram(colour='black') +
  facet_wrap(~GENDER) +
  guides(fill=FALSE) + 
  theme_minimal() +
  labs(y= 'No. of \nPupils', x='English Score') +
  theme(axis.title.y=element_text(angle = 0)) +
  ggtitle('Distribution of English scores by Gender')

```

The geom_histogram() function is used twice to create two overlapping histograms. 

The first histogram is created using the d_bg dataset (no GENDER data, rep all GENDERs) and is filled with grey. This histogram represents the background distribution of ENGLISH marks across ALL GENDERs. 

The second histogram is created using the entire exam dataset and makes use of the fill = GENDER in ggplot() to color gender differently. This results in a legend and is removed with guides(fill=FALSE). It also has a black border. This histogram represents the distribution of ENGLISH scores for each individual GENDER. 

Finally, facet_wrap(~GENDER) will create panels to represent distribution for each GENDER for easy comparison.

Reference: [Plot background histogram data](https://drsimonj.svbtle.com/plotting-background-data-for-groups-with-ggplot2) 

:::

## Task 5: Improve the existing scatterplot of English against Math scores

The original design below has several flaws:

1.  The limits and scale ticks of both axes are inconsistent. 

```{r}
#| code-fold: true

ggplot(data=exam_data,
       aes(x=MATHS, y=ENGLISH)) +
  geom_point()
```
The improvised design in Makeover 1 now includes:

1. Common x and Y axes scale and range.

2. Reference lines at 50 marks for both subjects.


::: panel-tabset

#### Makeover 1

```{r}
#| echo: false
ggplot(data=exam_data,
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  ylim(0,100) +
  xlim(0,100) +
  geom_vline(xintercept=50, linetype='dashed') +
  geom_hline(yintercept=50, linetype='dashed')
```

#### Makeover 1 code chunk
```{r}
#| eval: false
ggplot(data=exam_data,
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  ylim(0,100) +
  xlim(0,100) +
  geom_vline(xintercept=50, linetype='dashed') +
  geom_hline(yintercept=50, linetype='dashed')
  
```
:::

In makeover 2, I have included a third numerical variable, Science score into the scatterplot.

The position of the legend has been shifted to the bottom.


In makeover 3, I have used the ggExtra library to add distribution of the English and Math scores in the form of histograms at the margins of the plot. 

:::panel-tabset


#### Makeover 2
```{r}
#| code-fold: true
ggplot(data=exam_data,
       aes(x=MATHS, y=ENGLISH)) +
  geom_point(aes(color=SCIENCE)) +
  ylim(0,100) +
  xlim(0,100) +
  geom_vline(xintercept=50, linetype='dashed') +
  geom_hline(yintercept=50, linetype='dashed') +
  ggtitle('Scatterplot of English and Math scores') +
  theme_minimal() +
  theme(legend.position='bottom') +
  scale_color_gradient(low="darkgreen", high="green")


```
#### Makeover 3
```{r}
#| code-fold: true
library(ggExtra)

ggMarginal(ggplot(data=exam_data,
       aes(x=MATHS, y=ENGLISH)) +
  geom_point(aes(color=SCIENCE)) +
  ylim(0,100) +
  xlim(0,100) +
  geom_vline(xintercept=50, linetype='dashed') +
  geom_hline(yintercept=50, linetype='dashed') +
  ggtitle('Scatterplot of English and Math scores') +
  theme_minimal() +
  theme(legend.position='bottom') +
  scale_color_gradient(low="darkgreen", high="green"), 
  
  type="histogram", fill =4)
```

Reference:
['How to change ggplot2 colours manually and automatically?'](http://www.sthda.com/english/wiki/ggplot2-colors-how-to-change-colors-automatically-and-manually)

:::

